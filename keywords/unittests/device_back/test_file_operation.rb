#
# This file is generated by att util tool.
# by 2011-12-08 19:00:10
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../') unless $LOADED
require 'keywords/unittests/setup'

$stdouttype = "utf-8"

class TestFileOperation < Test::Unit::TestCase
  def setup
    @common = Common.new
    @file_operation = DeviceBack::FileOperation.new
    @interface_zone = DeviceConsole::NetConfig::InterfaceZone.new
    @dos_defence = keyword_proxy_for_class_name( DeviceConsole::FireWall::DosDefence ).new

    assert_success do
      @common.set_current_device( $common["login_hash"] ) # 设置正确的当前设备的IP,用户名,密码
    end
  end

  def test_check_config_file_content
    # 不启用eth2接口,路由接口类型,静态IP连接类型,DNS解析检测链路故障

    assert_success do
      @interface_zone.edit_physical_interface( { :name => "eth2", :enable => "否", :description => "描述", :type => "路由",
          :is_wan => "是", :enable_ping => "是", :link_type => "静态IP", :static_ip => "22.22.22.22/255.255.255.0&33.33.33.33/24",
          :gateway => "200.200.200.200", :dhcp_add_default_route => "否", :adsl_account => "", :adsl_passwd => "",
          :adsl_shake_time => "20", :adsl_timeout => "80", :adsl_retry_times => '3', :adsl_auto => "是",
          :adsl_add_default_route => "否", :adsl_first_dns => "否", :up_bandwidth => "100MB/s", :down_bandwidth => "2KB/s",
          :enable_link_trouble_check => "是", :check_method => "DNS解析", :ping_ip => "", :dns_server => "4.4.4.4",
          :dns_domain => "www.sangfor.com", :check_interval => "5", :access_id => "1", :native_id => "2", :vlan_scope => "1-999",
          :work_mode => "半双工10M", :mtu => 2000, :mac => "" } )
    end
    # 检查接口配置文件,参数都正确
    assert_success do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "接口",
          :record_key => "name", :item_value => "name=eth2&descript=描述&ethtype=4&iswan=1&ethup=0&ping=1&mtu=2000&ipcnt=2&ip0=22.22.22.22/255.255.255.0&ip1=33.33.33.33/24&check_enable=1"})
    end
    # 检查接口配置文件,检查项和值不包含记录标识
    assert_hope("检查项和值不包含记录标识") do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "接口",
          :record_key => "name", :item_value => "descript=描述&ethtype=4&iswan=1&ethup=0&ping=1&mtu=2000"})
    end
    # 检查接口配置文件,不存在记录
    assert_hope("记录不存在") do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "接口",
          :record_key => "name", :item_value => "name=eth222&descript=描述&ethtype=4&iswan=1&ethup=0&ping=1&mtu=2000"})
    end
    # 检查接口配置文件,检查项和值参数中的部分检查项的值错误
    assert_fail do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "接口",
          :record_key => "name", :item_value => "name=eth2&descript=描述&ethtype=4&iswan=1&ethup=0&ping=1&mtu=1500&ipcnt=2&ip0=22.22.22.22/255.255.255.0&ip1=33.33.33.33/24&check_enable=1"})
    end
    # 检查接口配置文件,参数都正确
    assert_success do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "接口",
          :record_key => "name", :item_value => "name = eth2&descript =描述&ethtype= 4&iswan = 1&ethup=0&ping=1&mtu=2000&ipcnt=2&ip0=22.22.22.22/255.255.255.0&ip1=33.33.33.33/24&check_enable=1"})
    end

    # 检查文件内容
    assert_success do
      @file_operation.check_common_file_content({:devicename => $common["device_name"],:file => "/etc/sinfor/fw/netconfigeth.ini", :checkpoint => "name = eth2"})
    end
    # 检查文件内容
    assert_hope("检查点不存在") do
      @file_operation.check_common_file_content({:devicename => $common["device_name"],:file => "/etc/sinfor/fw/netconfigeth.ini", :checkpoint => "name = hello"})
    end
    # 检查文件内容
    assert_hope("文件不存在") do
      @file_operation.check_common_file_content({:devicename => $common["device_name"],:file => "/hello.txt", :checkpoint => "name = hello"})
    end

    puts("这里是 test_check_config_file_content ... ===================@@Woolen Test@@====================")
    # 检查接口配置文件,检查项和值不包含记录标识
    assert_hope("检查项和值不包含记录标识") do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "WEB应用防护",
          :record_key => "name", :item_value => "descript=描述&ethtype=4&iswan=1&ethup=0&ping=1&mtu=2000"})
    end
    # 检查接口配置文件,参数都正确
    assert_success do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "WEB应用防护",
          :record_key => "name", :item_value => "name=waftest&src_zone_name=eth8,eth7,【Wan】,【Lan】&custom_type_cnt=2&entity_length=2048"})
    end
    # 检查接口配置文件,参数都正确,但是文件不包含记录
    assert_fail do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "自定义敏感信息",
          :record_key => "name", :item_value => "name=woolenTest&src_zone_name=eth8,eth7,【Wan】,【Lan】&custom_type_cnt=2&entity_length=2048"})
    end
    # 检查接口配置文件,参数都正确
    assert_success do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "自定义敏感信息",
          :record_key => "name", :item_value => "name=woolenTest&expression=justtest"})
    end
    # 检查接口配置文件,参数都正确
    assert_success do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "DLP排除IP",
          :record_key => "name", :item_value => "name=2&endIP0=84215045"})
    end
    # 检查接口配置文件,参数都正确
    assert_success do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "DLP排除URL",
          :record_key => "url", :item_value => "url=/a/b/c"})
    end
    # 检查接口配置文件,参数都正确 联动封锁IP
    assert_success do
      @file_operation.check_config_file_content({:devicename => $common["device_name"], :config_name => "联动封锁IP",
          :record_key => "block_time_len", :item_value => "block_time_len=30"})
    end
  end

  def test_check_subport_config_file
    # 删除所有的子接口
    assert_success do
      @interface_zone.delete_sub_interfaces({:delete_type => "全部删除"})
    end
    # 允许ping,连接类型是静态IP,启用链路故障检测,检测方法是ping
    assert_success do
      @interface_zone.add_sub_interface_on_physical_interface({:name => "eth2", :vlan_id => "1",
          :description => "描述",:enable_ping => "是", :link_type => "静态IP", :static_ip => "5.5.5.5/24&6.6.6.6/255.255.255.0",
          :gateway => "200.200.200.200", :get_default_gw => "否", :enable_link_trouble_check => "是",
          :check_method => "PING", :dns_server => "", :dns_domain => "www.sangfor.com", :ping_ip => "202.96.137.23",
          :check_interval => "5", :mtu => "1500"})
    end
    # 检查子接口配置文件
    assert_success do
      @file_operation.check_subport_config_file({:devicename => $common["device_name"], :subport_name => "eth2.1",
          :item_value => "ip_cnt=2&ip0=5.5.5.5/24&ip1=6.6.6.6/255.255.255.0&is_ping=1&is_static_ip=1&nextgw=200.200.200.200&is_link_check=1&check_interval=5"})
    end
    # 检查不存在的子接口配置
    assert_hope("记录不存在") do
      @file_operation.check_subport_config_file({:devicename => $common["device_name"], :subport_name => "eth3.1",
          :item_value => "ip_cnt=1"})
    end
    # 删除所有的子接口
    assert_success do
      @interface_zone.delete_sub_interfaces({:delete_type => "全部删除"})
    end
    # 检查不存在的子接口配置
    assert_hope("记录不存在") do
      @file_operation.check_subport_config_file({:devicename => $common["device_name"], :subport_name => "eth3.2",
          :item_value => "ip_cnt=1"})
    end
  end

  def test_download_file
    # 下载存在的文件,保存在项目temp目录下
    assert_success do
      @file_operation.download_file({:name => $common["device_name"], :file => "/etc/sinfor/fw/hole_library.ini", :local_dir => ""})
    end
    # 下载不存在的文件
    assert_fail do
      @file_operation.download_file({:name => $common["device_name"], :file => "/etc/sinfor/fw/hello", :local_dir => ""})
    end
    # 下载存在的文件,保存在带中文的目录下
    assert_success do
      @file_operation.download_file({:name => $common["device_name"], :file => "/etc/sinfor/fw/hole_library.ini", :local_dir => "D:/新建文件夹"})
    end
  end

  def test_upload_file
    # 下载存在的文件,保存在项目temp目录下
    local_file = @file_operation.download_file({:name => $common["device_name"], :file => "/etc/sinfor/fw/hole_library.ini", :local_dir => ""})[0]
    # 上传本地文件(存在的)到目的路径下(存在的)
    assert_success do
      @file_operation.upload_file({:name => $common["device_name"], :local_file => local_file, :dest_dir => "/var" })
    end
    # 上传本地文件(存在的)到目的路径下(不存在的)
    assert_fail do
      @file_operation.upload_file({:name => $common["device_name"], :local_file => local_file, :dest_dir => "/notexist" })
    end
    # 上传本地文件(不存在的)到目的路径下(存在的)
    assert_fail do
      @file_operation.upload_file({:name => $common["device_name"], :local_file => "H:/aa.txt", :dest_dir => "/var" })
    end
    # 上传本地文件(不存在的)到目的路径下(不存在的)
    assert_fail do
      @file_operation.upload_file({:name => $common["device_name"], :local_file => "H:/aa.txt", :dest_dir => "/notexist" })
    end
  end

  def test_check_wandos_config_file_content
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone223", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增外网防护策略,勾选所有防护
    assert_success do
      @dos_defence.add_internet_dos_defence_policy({:enable => "是", :name => "OUTDOS11", :description => "描述描述",
          :source_zone => "zone223", :arp_defence => "是", :arp_threshold => "5000",
          :ipscan_defence => "是", :ipscan_threshold => "4000", :portscan_defence => "是", :portscan_threshold => "4000",
          :dos_dstip_group => "全部", :icmp_defence => "是", :icmp_threshold => "2000",
          :udp_defence => "是", :udp_threshold => "100000", :syn_defence => "是", :syn_dstip_activate_threshold => "5000",
          :syn_dstip_drop_threshold => "10000", :syn_srcip_threshold => "10000", :dns_defence => "是",
          :dns_threshold => "10000", :data_packet_defence => "未知协议类型防护&TearDrop攻击防护&IP数据块分片传输防护&LAND攻击防护&WinNuke攻击防护&Smurf攻击防护&超大ICMP数据攻击防护",
          :ip_protocol_options => "错误的IP报文选项防护&IP时间戳选项报文防护&IP安全选项报文防护&IP数据流项报文防护&IP记录路由选项报文防护&IP宽松源路由选项报文防护&IP严格源路由选项报文防护",
          :tcp_protocol_options => "SYN数据分片传输防护&TCP报头标志位全为0防护&SYN和FIN标志位同时为1防护&仅FIN标志位为1防护",
          :record_logs => "是", :block => "是"  })
    end
    # 新增外网防护策略,不勾选任何防护
    assert_success do
      @dos_defence.add_internet_dos_defence_policy({:enable => "是", :name => "OUTDOS12", :description => "",
          :source_zone => "zone223", :arp_defence => "否", :arp_threshold => "5000",
          :ipscan_defence => "否", :ipscan_threshold => "4000", :portscan_defence => "否", :portscan_threshold => "4000",
          :dos_dstip_group => "全部", :icmp_defence => "否", :icmp_threshold => "2000",
          :udp_defence => "否", :udp_threshold => "100000", :syn_defence => "否", :syn_dstip_activate_threshold => "5000",
          :syn_dstip_drop_threshold => "10000", :syn_srcip_threshold => "10000", :dns_defence => "否",
          :dns_threshold => "10000", :data_packet_defence => "",
          :ip_protocol_options => "",
          :tcp_protocol_options => "",
          :record_logs => "否", :block => "否"  })
    end
    # 检查DOS外网防护策略的配置,期望字段值与实际完全一致
    assert_success do
      @file_operation.check_wandos_config_file_content({:devicename => $common['device_name'], :policy_name => "OUTDOS11",
          :icmpflood => "2000[1]", :udpflood => "100000[1]", :dnsflood => "10000[1]", :synflood => "5000-10000-10000[1]",
          :arpflood => "5000[1]", :ipscan => "4000[1]", :portscan => "40[1]",  :pktatk => "bf", :ipatk => "7f", :tcpatk => "f", :opflags => "5" })
    end
    # 检查DOS外网防护策略的配置,期望字段值与实际完全一致
    assert_success do
      @file_operation.check_wandos_config_file_content({:devicename => $common['device_name'], :policy_name => "OUTDOS12",
          :icmpflood => "2000[0]", :udpflood => "100000[0]", :dnsflood => "10000[0]", :synflood => "5000-10000-10000[0]",
          :arpflood => "5000[0]", :ipscan => "4000[0]", :portscan => "40[0]",  :pktatk => "0", :ipatk => "0", :tcpatk => "0", :opflags => "0" })
    end
    # 检查DOS外网防护策略的配置,期望字段值与实际不完全一致
    assert_fail do
      @file_operation.check_wandos_config_file_content({:devicename => $common['device_name'], :policy_name => "OUTDOS11",
          :icmpflood => "2000[0]", :udpflood => "100000[1]", :dnsflood => "10000[1]", :synflood => "5000-10000-10000[1]",
          :arpflood => "5000[1]", :ipscan => "4000[1]", :portscan => "40[1]",  :pktatk => "bf", :ipatk => "7f", :tcpatk => "f", :opflags => "5" })
    end
    # 检查DOS外网防护策略的配置,期望字段值与实际不完全一致
    assert_fail do
      @file_operation.check_wandos_config_file_content({:devicename => $common['device_name'], :policy_name => "OUTDOS12",
          :icmpflood => "2000[0]", :udpflood => "100000[0]", :dnsflood => "10000[0]", :synflood => "5000-10000-10000[1]",
          :arpflood => "5000[0]", :ipscan => "4000[0]", :portscan => "40[0]",  :pktatk => "0", :ipatk => "0", :tcpatk => "0", :opflags => "0" })
    end
    # 检查DOS外网防护策略的配置,不存在的DOS外网防护策略
    assert_hope("策略不存在") do
      @file_operation.check_wandos_config_file_content({:devicename => $common['device_name'], :policy_name => "aaaaaa",
          :icmpflood => "2000[0]", :udpflood => "100000[0]", :dnsflood => "10000[0]", :synflood => "5000-10000-10000[0]",
          :arpflood => "5000[0]", :ipscan => "4000[0]", :portscan => "40[0]",  :pktatk => "0", :ipatk => "0", :tcpatk => "0", :opflags => "0" })
    end
    # 删除外网防护策略
    assert_success do
      @dos_defence.delete_internet_dos_defence_policy({:delete_type => "全部删除", :names => ""})
    end
    # 删除区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "部分删除", :names => "zone223"})
    end
  end

  def test_check_core_file_exist
    puts("这里是 test_check_core_file_exist ... ===================@@Woolen Test@@====================")
    # 检查是否有任意core文件
    assert_success do
      @file_operation.check_core_file_exist({:devicename => $common["device_name"], :checkpoint => "任意", :hope => "失败"})
    end
    # 检查是否有abc程序的core文件,期待没有
    assert_fail do
      @file_operation.check_core_file_exist({:devicename => $common["device_name"], :checkpoint => "bcd", :hope => "失败"})
    end
    # 默认配置
    assert_success do
      @file_operation.check_core_file_exist({:devicename => $common["device_name"], :hope => "失败"})
    end
  end

  def test_check_rlog_exist
    puts("这里是 test_check_rlog_exist ... ===================@@Woolen Test@@====================")
    # 检查是否有任意重启记录
    assert_success do
      @file_operation.check_rlog_exist({:devicename => $common["device_name"], :checkpoint => "任意", :hope => "失败"})
    end
    # 检查是否有abc程序的重启记录,期待没有
    assert_fail do
      @file_operation.check_rlog_exist({:devicename => $common["device_name"], :checkpoint => "bcd", :hope => "失败"})
    end
    # 默认配置
    assert_success do
      @file_operation.check_rlog_exist({:devicename => $common["device_name"], :hope => "失败"})
    end
  end
end