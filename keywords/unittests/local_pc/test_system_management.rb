#
# This file is generated by att util tool.
# by 2011-12-09 10:09:56
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../') unless $LOADED
require 'keywords/unittests/setup'

#$stdouttype = "GBK"

class TestSystemManagement < Test::Unit::TestCase
  def setup
    @system_management = LocalPc::SystemManagement.new
  end
=begin
  def test_add_ip_address
    # 正确添加IP地址
    assert_success do
      @system_management.add_ip_address({:ip => "1.1.1.1", :mask => "255.255.255.0", :gateway => "", :connection_name => "本地连接"})
    end
    sleep 10
    # 删除IP地址
    assert_success do
      @system_management.delete_ip_address({:ip => "1.1.1.1", :gateway => "", :connection_name => "本地连接"})
    end
    # 添加错误的IP地址
    assert_fail do
      @system_management.add_ip_address({:ip => "1.1.1.1", :mask => "255.255.255.0", :gateway => "", :connection_name => "不存在的连接"})
    end
  end

  def test_set_dns_server_addresses
    # 清空DNS设置
    assert_success do
      @system_management.set_dns_server_addresses({:connection_name => "本地连接", :first_dns => "", :secondary_dns => ""})
    end
    # 设置主DNS
    assert_success do
      @system_management.set_dns_server_addresses({:connection_name => "本地连接", :first_dns => "202.96.134.133", :secondary_dns => ""})
    end
    # 设置主和备DNS
    assert_success do
      @system_management.set_dns_server_addresses({:connection_name => "本地连接", :first_dns => "202.96.128.86", :secondary_dns => "202.96.134.133"})
    end
    # 清空DNS设置
    assert_success do
      @system_management.set_dns_server_addresses({:connection_name => "本地连接", :first_dns => "", :secondary_dns => ""})
    end
  end

  def test_find_process_id
    # 存在一个进程
    assert_success do
      @system_management.find_process_id({:process_name => "Ingress.exe"})
    end
    # 存在多个同名进程,仅返回第一个进程ID
    assert_success do
      @system_management.find_process_id({:process_name => "svchost.exe"})
    end
    # 不存在的进程
    assert_fail do
      @system_management.find_process_id({:process_name => "aaaaaaa.exe"})
    end
  end

  def test_force_to_kill_pid
    # 杀死不存在的进程ID
    assert_success do
      @system_management.force_to_kill_pid({:pid => "100000000000"})
    end
    # 杀死存在的进程ID
    assert_success do
      @system_management.force_to_kill_pid({:pid => "5096"})
    end
  end

  def test_set_ip_address
    # 设置IP
    assert_success do
      @system_management.set_ip_address({:ip => "100.100.100.100", :mask => "255.255.255.0", :gateway => "", :connection_name => "本地连接"})
    end
    # 设置IP
    assert_success do
      @system_management.set_ip_address({:ip => "192.168.21.27", :mask => "255.255.255.0", :gateway => "192.168.21.1", :connection_name => "本地连接"})
    end
  end
=end
  def test_exec_ipconfig_cmd
    #测试默认值
    assert_success do
      @system_management.exec_ipconfig_cmd({})
    end
    #测试不存在的IP地址标识符
     assert_fail do
      @system_management.exec_ipconfig_cmd({:ip_key => "testIP"})
    end 
    ##测试获取指定的IP
     assert_success do
      @system_management.exec_ipconfig_cmd({:which => 2})
    end
    ##测试获取指定的IP，但不在范围内
     assert_fail do
      @system_management.exec_ipconfig_cmd({:which => 20})
    end

  end
end