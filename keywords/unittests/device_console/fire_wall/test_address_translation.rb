# coding: utf8
# 
# This file is generated by att util tool.
# by 2011-12-08 09:54:18
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../../') unless $LOADED
require 'keywords/unittests/setup'

$stdouttype = "GBK"

class TestAddressTranslation < Test::Unit::TestCase
  
  def setup
    @common = Common.new
    @address_translation = DeviceConsole::FireWall::AddressTranslation.new
    @interface_zone = DeviceConsole::NetConfig::InterfaceZone.new
    @ip_group = DeviceConsole::ObjectDefinition::IpGroup.new
    
    assert_success do
      @common.set_current_device( $common["login_hash"] ) # 设置正确的当前设备的IP,用户名,密码
    end
  end

  def test_add_source_address_translation
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone1", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone2", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone3", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp1", :description => "描述", :ip_addresses => "2.2.2.2&1.1.1.1-1.1.1.100&3.3.3.3"})
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp3", :description => "描述", :ip_addresses => "2.2.2.2 & 1.1.1.1-1.1.1.100& 3.3.3.3 "})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source1", :enable => "是",
          :description => "描述", :source_zone => "zone1&zone2", :source_ipgs => "ipgrp1&ipgrp3",
          :destination => "区域", :dest_zone => "zone3", :dest_interface => "", :dest_ipgs => "全部",
          :protocol_type => "所有协议", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source2", :enable => "是",
          :description => "描述", :source_zone => "zone3", :source_ipgs => "全部",
          :destination => "接口", :dest_zone => "", :dest_interface => "eth2", :dest_ipgs => "ipgrp1",
          :protocol_type => "TCP", :protocol_num => "", :source_port => "指定端口", :s_port => "2",
          :dest_port => "指定端口", :d_port => "5", :translation_as => "IP范围", :ip_scope => "1.1.1.1-2.2.2.2", :one_ip => ""})
    end
    # 删除地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "部分删除", :names => "source1&source2"})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source3", :enable => "是",
          :description => "", :source_zone => "zone3", :source_ipgs => "ipgrp1&ipgrp3",
          :destination => "接口", :dest_zone => "", :dest_interface => "eth2", :dest_ipgs => "ipgrp1",
          :protocol_type => "UDP", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "指定端口", :d_port => "5", :translation_as => "指定IP", :ip_scope => "", :one_ip => "1.1.1.1"})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source4", :enable => "是",
          :description => "", :source_zone => "zone3", :source_ipgs => "全部",
          :destination => "接口", :dest_zone => "", :dest_interface => "eth2", :dest_ipgs => "全部",
          :protocol_type => "ICMP", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "不转换", :ip_scope => "", :one_ip => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source5", :enable => "是",
          :description => "", :source_zone => "zone3", :source_ipgs => "全部",
          :destination => "接口", :dest_zone => "", :dest_interface => "eth2", :dest_ipgs => "全部",
          :protocol_type => "TCPUDP", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source6", :enable => "是",
          :description => "", :source_zone => "zone3", :source_ipgs => "全部",
          :destination => "接口", :dest_zone => "", :dest_interface => "eth2", :dest_ipgs => "全部",
          :protocol_type => "IP", :protocol_num => "35", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "不转换", :ip_scope => "", :one_ip => ""})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_edit_source_address_translation
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone6", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp5", :description => "描述", :ip_addresses => "2.2.2.2"})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source7", :enable => "是",
          :description => "描述", :source_zone => "zone6", :source_ipgs => "ipgrp5",
          :destination => "接口", :dest_zone => "", :dest_interface => "eth2", :dest_ipgs => "全部",
          :protocol_type => "所有协议", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 编辑源地址转换
    assert_success do
      @address_translation.edit_source_address_translation({ :name => "source7", :newname => "", :enable => "是",
          :description => "描述", :source_zone => "zone6", :source_ipgs => "全部",
          :destination => "区域", :dest_zone => "zone6", :dest_interface => "", :dest_ipgs => "ipgrp5",
          :protocol_type => "ICMP", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "不转换", :ip_scope => "", :one_ip => ""})
    end
    # 编辑源地址转换,改名
    assert_fail do
      @address_translation.edit_source_address_translation({ :name => "source7", :newname => "hekki", :enable => "是",
          :description => "描述", :source_zone => "zone6", :source_ipgs => "全部",
          :destination => "区域", :dest_zone => "zone6", :dest_interface => "", :dest_ipgs => "ipgrp5",
          :protocol_type => "ICMP", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "不转换", :ip_scope => "", :one_ip => ""})
    end
    # 编辑源地址转换
    assert_success do
      @address_translation.edit_source_address_translation({ :name => "source7", :newname => "", :enable => "是",
          :description => "描述", :source_zone => "zone6", :source_ipgs => "全部",
          :destination => "接口", :dest_zone => "", :dest_interface => "eth2", :dest_ipgs => "全部",
          :protocol_type => "TCP", :protocol_num => "", :source_port => "指定端口", :s_port => "1",
          :dest_port => "指定端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_add_destination_address_translation
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone7", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone8", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp6", :description => "描述", :ip_addresses => "2.2.2.2"})
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp7", :description => "描述", :ip_addresses => "2.2.2.3"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 新增目的地址转换规则
    assert_success do
      @address_translation.add_destination_address_translation({:name => "dst1", :enable => "是", :description=>"描述",
          :source_zone => "zone7&zone8" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "ipgrp6&ipgrp7",
          :protocol_type => '所有协议', :dest_ports => "",:protocol_num => "",:ip_translation_as => "IP范围",
          :ip_scope => "1.1.1.1-2.2.2.2",:one_ip => "", :port_translation_as => "不转换", :one_port => "",
          :source_ipgs => "全部", :source_port_type => "所有端口", :source_one_port => ""})
    end
    # 新增目的地址转换规则
    assert_success do
      @address_translation.add_destination_address_translation({:name => "dst2", :enable => "是", :description=>"描述",
          :source_zone => "zone7" , :destip_type => "指定IP",:dest_ips => "192.168.1.1&192.168.2.2", :dest_ipgs => "",
          :protocol_type => 'TCP', :dest_ports => "12",:protocol_num => "",:ip_translation_as => "指定IP",
          :ip_scope => "",:one_ip => "2.2.2.2", :port_translation_as => "指定端口", :one_port => "30",
          :source_ipgs => "ipgrp6&ipgrp7", :source_port_type => "指定端口", :source_one_port => "33"})
    end
    # 删除地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "部分删除", :names => "dst1&dst2"})
    end
    # 新增目的地址转换规则
    assert_success do
      @address_translation.add_destination_address_translation({:name => "dst3", :enable => "是", :description=>"描述",
          :source_zone => "zone7" , :destip_type => "指定IP",:dest_ips => "192.168.1.6", :dest_ipgs => "",
          :protocol_type => 'UDP', :dest_ports => "14",:protocol_num => "",:ip_translation_as => "不转换",
          :ip_scope => "",:one_ip => "", :port_translation_as => "不转换", :one_port => "",
          :source_ipgs => "ipgrp6&ipgrp7", :source_port_type => "所有端口", :source_one_port => ""})
    end
    # 删除地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "部分删除", :names => "dst3"})
    end
    # 新增目的地址转换规则
    assert_success do
      @address_translation.add_destination_address_translation({:name => "dst4", :enable => "是", :description=>"描述",
          :source_zone => "zone7" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "ipgrp6",
          :protocol_type => 'ICMP', :dest_ports => "",:protocol_num => "",:ip_translation_as => "不转换",
          :ip_scope => "",:one_ip => "", :port_translation_as => "指定端口", :one_port => "20",
          :source_ipgs => "全部", :source_port_type => "指定端口", :source_one_port => "33"})
    end
    # 新增目的地址转换规则
    assert_success do
      @address_translation.add_destination_address_translation({:name => "dst5", :enable => "是", :description=>"描述",
          :source_zone => "zone7" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "ipgrp6",
          :protocol_type => 'TCPUDP', :dest_ports => "26",:protocol_num => "",:ip_translation_as => "指定IP",
          :ip_scope => "",:one_ip => "2.3.3.3", :port_translation_as => "指定端口", :one_port => "20",
          :source_ipgs => "全部", :source_port_type => "指定端口", :source_one_port => "33"})
    end
    # 新增目的地址转换规则
    assert_success do
      @address_translation.add_destination_address_translation({:name => "dst6", :enable => "是", :description=>"描述",
          :source_zone => "zone7" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "ipgrp6",
          :protocol_type => 'IP', :dest_ports => "",:protocol_num => "56",:ip_translation_as => "指定IP",
          :ip_scope => "",:one_ip => "2.3.3.3", :port_translation_as => "不转换", :one_port => "",
          :source_ipgs => "全部", :source_port_type => "所有端口", :source_one_port => ""})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_edit_destination_address_translation
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone9", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone10", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp8", :description => "描述", :ip_addresses => "2.2.2.2"})
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp9", :description => "描述", :ip_addresses => "2.2.2.3"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 新增目的地址转换规则
    assert_success do
      @address_translation.add_destination_address_translation({:name => "dst7", :enable => "是", :description=>"描述",
          :source_zone => "zone9" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "ipgrp8",
          :protocol_type => '所有协议', :dest_ports => "",:protocol_num => "",:ip_translation_as => "IP范围",
          :ip_scope => "1.1.1.1-2.2.2.2",:one_ip => "", :port_translation_as => "不转换", :one_port => "",
          :source_ipgs => "全部", :source_port_type => "所有端口", :source_one_port => ""})
    end
    # 编辑目的地址转换规则
    assert_success do
      @address_translation.edit_destination_address_translation({:name => "dst7", :newname => "", :enable => "是", :description=>"描述描述",
          :source_zone => "zone9&zone10" , :destip_type => "指定IP",:dest_ips => "2.2.2.9&2.2.2.10", :dest_ipgs => "",
          :protocol_type => 'TCP', :dest_ports => "24&30-36",:protocol_num => "",:ip_translation_as => "指定IP",
          :ip_scope => "",:one_ip => "6.2.2.2", :port_translation_as => "指定端口", :one_port => "56",
          :source_ipgs => "ipgrp8&ipgrp9", :source_port_type => "指定端口", :source_one_port => "88"})
    end
    # 编辑目的地址转换规则
    assert_success do
      @address_translation.edit_destination_address_translation({:name => "dst7", :newname => "", :enable => "是", :description=>"描述描述",
          :source_zone => "zone9&zone10" , :destip_type => "指定IP",:dest_ips => "2.2.2.9&2.2.2.10", :dest_ipgs => "",
          :protocol_type => 'TCP', :dest_ports => "29",:protocol_num => "",:ip_translation_as => "指定IP",
          :ip_scope => "",:one_ip => "6.2.2.2", :port_translation_as => "指定端口", :one_port => "56",
          :source_ipgs => "ipgrp8&ipgrp9", :source_port_type => "指定端口", :source_one_port => "88"})
    end
    # 编辑目的地址转换规则
    assert_success do
      @address_translation.edit_destination_address_translation({:name => "dst7", :newname => "", :enable => "是", :description=>"描述描述",
          :source_zone => "zone10" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "全部",
          :protocol_type => 'ICMP', :dest_ports => "",:protocol_num => "33",:ip_translation_as => "不转换",
          :ip_scope => "",:one_ip => "", :port_translation_as => "不转换", :one_port => "",
          :source_ipgs => "全部", :source_port_type => "所有端口", :source_one_port => ""})
    end
    # 编辑目的地址转换规则
    assert_success do
      @address_translation.edit_destination_address_translation({:name => "dst7", :newname => "", :enable => "是", :description=>"描述描述",
          :source_zone => "zone9" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "全部",
          :protocol_type => 'IP', :dest_ports => "",:protocol_num => "33",:ip_translation_as => "不转换",
          :ip_scope => "",:one_ip => "", :port_translation_as => "不转换", :one_port => "",
          :source_ipgs => "全部", :source_port_type => "所有端口", :source_one_port => ""})
    end
    # 编辑目的地址转换规则
    assert_success do
      @address_translation.edit_destination_address_translation({:name => "dst7", :newname => "", :enable => "是", :description=>"描述描述",
          :source_zone => "zone9" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "全部",
          :protocol_type => 'UDP', :dest_ports => "33",:protocol_num => "",:ip_translation_as => "不转换",
          :ip_scope => "",:one_ip => "", :port_translation_as => "不转换", :one_port => "",
          :source_ipgs => "全部", :source_port_type => "所有端口", :source_one_port => ""})
    end
    # 编辑目的地址转换规则,改名
    assert_fail do
      @address_translation.edit_destination_address_translation({:name => "dst7", :newname => "dst99", :enable => "是", :description=>"描述描述",
          :source_zone => "zone9" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "全部",
          :protocol_type => 'UDP', :dest_ports => "33",:protocol_num => "",:ip_translation_as => "不转换",
          :ip_scope => "",:one_ip => "", :port_translation_as => "不转换", :one_port => "",
          :source_ipgs => "全部", :source_port_type => "所有端口", :source_one_port => ""})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_add_bidirection_address_translation
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone11", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone12", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp10", :description => "描述", :ip_addresses => "2.2.2.2"})
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp11", :description => "描述", :ip_addresses => "2.2.2.3"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 新增双向地址转换
    assert_success do
      @address_translation.add_bidirection_address_translation({:name => "bidnat1", :enable => "是",:description=>"描述",
          :source_zone => "zone11&zone12", :source_ipgs => "ipgrp10&ipgrp11", :destination => "区域", :dest_zone => "zone11",
          :dest_interface => "", :destip_type => "指定IP", :dest_ips => "3.4.4.4&5.6.6.6", :dest_ipgs => "",
          :protocol_type => "所有协议", :dest_ports => "", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "", :source_translation_as => "出接口地址", :source_ip_scope => "", :source_one_ip => "",
          :dest_translation_as => "不转换", :dest_ip_scope => "", :dest_one_ip => "",
          :dest_port_translation_as => "不转换", :dest_one_port => ""})
    end
    # 删除地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "部分删除", :names => "bidnat1"})
    end
    # 新增双向地址转换
    assert_success do
      @address_translation.add_bidirection_address_translation({:name => "bidnat2", :enable => "是",:description=>"描述",
          :source_zone => "zone11", :source_ipgs => "全部", :destination => "区域", :dest_zone => "zone11&zone12",
          :dest_interface => "", :destip_type => "IP组", :dest_ips => "", :dest_ipgs => "ipgrp10&ipgrp11",
          :protocol_type => "TCP", :dest_ports => "26", :source_port_type => "指定端口", :source_one_port => "34",
          :protocol_num => "", :source_translation_as => "IP范围", :source_ip_scope => "1.1.1.1-2.2.2.2", :source_one_ip => "",
          :dest_translation_as => "指定IP", :dest_ip_scope => "", :dest_one_ip => "6.6.6.6",
          :dest_port_translation_as => "不转换", :dest_one_port => ""})
    end
    # 新增双向地址转换
    assert_success do
      @address_translation.add_bidirection_address_translation({:name => "bidnat3", :enable => "是",:description=>"描述",
          :source_zone => "zone11", :source_ipgs => "全部", :destination => "接口", :dest_zone => "",
          :dest_interface => "eth1", :destip_type => "指定IP", :dest_ips => "3.4.4.4", :dest_ipgs => "",
          :protocol_type => "UDP", :dest_ports => "26", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "", :source_translation_as => "指定IP", :source_ip_scope => "", :source_one_ip => "2.2.2.2",
          :dest_translation_as => "IP范围", :dest_ip_scope => "3.4.4.4-5.6.6.6", :dest_one_ip => "",
          :dest_port_translation_as => "指定端口", :dest_one_port => "10"})
    end
    # 删除地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "部分删除", :names => "bidnat2&bidnat3"})
    end
    # 新增双向地址转换
    assert_success do
      @address_translation.add_bidirection_address_translation({:name => "bidnat4", :enable => "是",:description=>"描述",
          :source_zone => "zone11", :source_ipgs => "全部", :destination => "接口", :dest_zone => "",
          :dest_interface => "eth1", :destip_type => "指定IP", :dest_ips => "3.4.4.4", :dest_ipgs => "",
          :protocol_type => "ICMP", :dest_ports => "", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "", :source_translation_as => "不转换", :source_ip_scope => "", :source_one_ip => "",
          :dest_translation_as => "不转换", :dest_ip_scope => "", :dest_one_ip => "",
          :dest_port_translation_as => "不转换", :dest_one_port => "1"})
    end
    # 新增双向地址转换
    assert_success do
      @address_translation.add_bidirection_address_translation({:name => "bidnat5", :enable => "是",:description=>"描述",
          :source_zone => "zone11", :source_ipgs => "全部", :destination => "接口", :dest_zone => "",
          :dest_interface => "eth1", :destip_type => "指定IP", :dest_ips => "3.4.4.4", :dest_ipgs => "",
          :protocol_type => "IP", :dest_ports => "", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "10", :source_translation_as => "出接口地址", :source_ip_scope => "", :source_one_ip => "",
          :dest_translation_as => "不转换", :dest_ip_scope => "", :dest_one_ip => "",
          :dest_port_translation_as => "不转换", :dest_one_port => "1"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_edit_bidirection_address_translation
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone13", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone14", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp12", :description => "描述", :ip_addresses => "2.2.2.2"})
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp13", :description => "描述", :ip_addresses => "2.2.2.3"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 新增双向地址转换
    assert_success do
      @address_translation.add_bidirection_address_translation({:name => "bidnat6", :enable => "是",:description=>"描述",
          :source_zone => "zone13&zone14", :source_ipgs => "ipgrp12&ipgrp13", :destination => "区域", :dest_zone => "zone13",
          :dest_interface => "", :destip_type => "指定IP", :dest_ips => "3.4.4.4&5.6.6.6", :dest_ipgs => "",
          :protocol_type => "所有协议", :dest_ports => "", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "", :source_translation_as => "出接口地址", :source_ip_scope => "", :source_one_ip => "",
          :dest_translation_as => "不转换", :dest_ip_scope => "", :dest_one_ip => "",
          :dest_port_translation_as => "不转换", :dest_one_port => ""})
    end
    # 编辑双向地址转换
    assert_success do
      @address_translation.edit_bidirection_address_translation({:name => "bidnat6", :newname => "", :enable => "是",:description=>"描述",
          :source_zone => "zone13", :source_ipgs => "全部", :destination => "区域", :dest_zone => "zone13&zone14",
          :dest_interface => "", :destip_type => "IP组", :dest_ips => "", :dest_ipgs => "ipgrp12&ipgrp13",
          :protocol_type => "TCP", :dest_ports => "26", :source_port_type => "指定端口", :source_one_port => "34",
          :protocol_num => "", :source_translation_as => "IP范围", :source_ip_scope => "1.1.1.1-2.2.2.2", :source_one_ip => "",
          :dest_translation_as => "指定IP", :dest_ip_scope => "", :dest_one_ip => "6.6.6.6",
          :dest_port_translation_as => "不转换", :dest_one_port => ""})
    end
    # 编辑双向地址转换
    assert_success do
      @address_translation.edit_bidirection_address_translation({:name => "bidnat6", :newname => "", :enable => "是",:description=>"描述",
          :source_zone => "zone13", :source_ipgs => "全部", :destination => "接口", :dest_zone => "",
          :dest_interface => "eth1", :destip_type => "指定IP", :dest_ips => "3.4.4.4", :dest_ipgs => "",
          :protocol_type => "UDP", :dest_ports => "26", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "", :source_translation_as => "指定IP", :source_ip_scope => "", :source_one_ip => "2.2.2.2",
          :dest_translation_as => "IP范围", :dest_ip_scope => "3.4.4.4-5.6.6.6", :dest_one_ip => "",
          :dest_port_translation_as => "指定端口", :dest_one_port => "10"})
    end
    # 编辑双向地址转换
    assert_success do
      @address_translation.edit_bidirection_address_translation({:name => "bidnat6", :newname => "", :enable => "是",:description=>"描述",
          :source_zone => "zone13", :source_ipgs => "全部", :destination => "接口", :dest_zone => "",
          :dest_interface => "eth1", :destip_type => "指定IP", :dest_ips => "3.4.4.4", :dest_ipgs => "",
          :protocol_type => "ICMP", :dest_ports => "", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "", :source_translation_as => "不转换", :source_ip_scope => "", :source_one_ip => "",
          :dest_translation_as => "不转换", :dest_ip_scope => "", :dest_one_ip => "",
          :dest_port_translation_as => "不转换", :dest_one_port => "1"})
    end
    # 编辑双向地址转换
    assert_success do
      @address_translation.edit_bidirection_address_translation({:name => "bidnat6", :newname => "", :enable => "是",:description=>"描述",
          :source_zone => "zone13", :source_ipgs => "全部", :destination => "接口", :dest_zone => "",
          :dest_interface => "eth1", :destip_type => "指定IP", :dest_ips => "3.4.4.4", :dest_ipgs => "",
          :protocol_type => "IP", :dest_ports => "", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "10", :source_translation_as => "出接口地址", :source_ip_scope => "", :source_one_ip => "",
          :dest_translation_as => "不转换", :dest_ip_scope => "", :dest_one_ip => "",
          :dest_port_translation_as => "不转换", :dest_one_port => "1"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_enable_disable_address_translations
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone15", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp14", :description => "描述", :ip_addresses => "2.2.2.2"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 新增双向地址转换
    assert_success do
      @address_translation.add_bidirection_address_translation({:name => "bidnat7", :enable => "是",:description=>"描述",
          :source_zone => "zone15", :source_ipgs => "ipgrp14", :destination => "区域", :dest_zone => "zone15",
          :dest_interface => "", :destip_type => "指定IP", :dest_ips => "3.4.4.4&5.6.6.6", :dest_ipgs => "",
          :protocol_type => "所有协议", :dest_ports => "", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "", :source_translation_as => "出接口地址", :source_ip_scope => "", :source_one_ip => "",
          :dest_translation_as => "不转换", :dest_ip_scope => "", :dest_one_ip => "",
          :dest_port_translation_as => "不转换", :dest_one_port => ""})
    end
    # 新增双向地址转换
    assert_success do
      @address_translation.add_bidirection_address_translation({:name => "bidnat8", :enable => "是",:description=>"描述",
          :source_zone => "zone15", :source_ipgs => "全部", :destination => "区域", :dest_zone => "zone15",
          :dest_interface => "", :destip_type => "IP组", :dest_ips => "", :dest_ipgs => "ipgrp14",
          :protocol_type => "TCP", :dest_ports => "26", :source_port_type => "指定端口", :source_one_port => "34",
          :protocol_num => "", :source_translation_as => "IP范围", :source_ip_scope => "1.1.1.1-2.2.2.2", :source_one_ip => "",
          :dest_translation_as => "指定IP", :dest_ip_scope => "", :dest_one_ip => "6.6.6.6",
          :dest_port_translation_as => "不转换", :dest_one_port => ""})
    end
    # 禁用地址转换
    assert_success do
      @address_translation.enable_disable_address_translations({:names => "bidnat7&bidnat8", :operation => "禁用"})
    end
    # 启用地址转换
    assert_success do
      @address_translation.enable_disable_address_translations({:names => "bidnat7", :operation => "启用"})
    end
    # 启用地址转换
    assert_success do
      @address_translation.enable_disable_address_translations({:names => "bidnat8", :operation => "启用"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_import_address_translations
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone100", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp100", :description => "描述", :ip_addresses => "2.2.2.2"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source100", :enable => "是",
          :description => "描述", :source_zone => "zone100", :source_ipgs => "ipgrp100",
          :destination => "区域", :dest_zone => "zone100", :dest_interface => "", :dest_ipgs => "全部",
          :protocol_type => "所有协议", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 新增目的地址转换规则
    assert_success do
      @address_translation.add_destination_address_translation({:name => "dst100", :enable => "是", :description=>"描述",
          :source_zone => "zone100" , :destip_type => "IP组",:dest_ips => "", :dest_ipgs => "ipgrp100",
          :protocol_type => '所有协议', :dest_ports => "",:protocol_num => "",:ip_translation_as => "IP范围",
          :ip_scope => "1.1.1.1-2.2.2.2",:one_ip => "", :port_translation_as => "不转换", :one_port => "",
          :source_ipgs => "全部", :source_port_type => "所有端口", :source_one_port => ""})
    end
    # 新增双向地址转换
    assert_success do
      @address_translation.add_bidirection_address_translation({:name => "bidnat100", :enable => "是",:description=>"描述",
          :source_zone => "zone100", :source_ipgs => "ipgrp100", :destination => "区域", :dest_zone => "zone100",
          :dest_interface => "", :destip_type => "指定IP", :dest_ips => "3.4.4.4&5.6.6.6", :dest_ipgs => "",
          :protocol_type => "所有协议", :dest_ports => "", :source_port_type => "所有端口", :source_one_port => "",
          :protocol_num => "", :source_translation_as => "出接口地址", :source_ip_scope => "", :source_one_ip => "",
          :dest_translation_as => "不转换", :dest_ip_scope => "", :dest_one_ip => "",
          :dest_port_translation_as => "不转换", :dest_one_port => ""})
    end
    # 导出地址转换规则
    assert_success do
     @address_translation.export_address_translations({:devicename => $common["device_name"], :names => "source100&dst100&bidnat100", :dir => "", :filename => "natrule.csv"})
     #@address_translation.export_address_translations({:devicename => $common["device_name"], :names => "snat242281", :dir => "", :filename => "natrule.csv"})
     end
    # 导入地址转换规则
    assert_hope("规则已存在") do
      @address_translation.import_address_translations({:devicename => $common["device_name"], :dir => "", :filename => "natrule.conf"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 导入地址转换规则
    assert_success do
      @address_translation.import_address_translations({:devicename => $common["device_name"], :dir => "", :filename => "natrule.conf"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_check_address_translation_item_count
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone200", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp200", :description => "描述", :ip_addresses => "2.2.2.2"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source200", :enable => "是",
          :description => "描述", :source_zone => "zone200", :source_ipgs => "ipgrp200",
          :destination => "区域", :dest_zone => "zone200", :dest_interface => "", :dest_ipgs => "全部",
          :protocol_type => "所有协议", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 检查地址转换规则数目
    assert_success do
      @address_translation.check_address_translation_item_count({:count => "1"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 检查地址转换规则数目
    assert_success do
      @address_translation.check_address_translation_item_count({:count => "0"})
    end
    # 检查地址转换规则数目
    assert_hope("规则数错误") do
      @address_translation.check_address_translation_item_count({:count => "1"})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_move_address_translation
    # 新增区域
    assert_success do
      @interface_zone.add_zone(:name => "zone300", :forward_type => "三层区域", :interfaces => "",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增IP组,正常
    assert_success do
      @ip_group.add_ip_group({:group_name => "ipgrp300", :description => "描述", :ip_addresses => "2.2.2.2"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source300", :enable => "是",
          :description => "描述", :source_zone => "zone300", :source_ipgs => "ipgrp300",
          :destination => "区域", :dest_zone => "zone300", :dest_interface => "", :dest_ipgs => "全部",
          :protocol_type => "所有协议", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source301", :enable => "是",
          :description => "描述", :source_zone => "zone300", :source_ipgs => "ipgrp300",
          :destination => "区域", :dest_zone => "zone300", :dest_interface => "", :dest_ipgs => "全部",
          :protocol_type => "所有协议", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source302", :enable => "是",
          :description => "描述", :source_zone => "zone300", :source_ipgs => "ipgrp300",
          :destination => "区域", :dest_zone => "zone300", :dest_interface => "", :dest_ipgs => "全部",
          :protocol_type => "所有协议", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 新增源地址转换
    assert_success do
      @address_translation.add_source_address_translation({ :name => "source303", :enable => "是",
          :description => "描述", :source_zone => "zone300", :source_ipgs => "ipgrp300",
          :destination => "区域", :dest_zone => "zone300", :dest_interface => "", :dest_ipgs => "全部",
          :protocol_type => "所有协议", :protocol_num => "", :source_port => "所有端口", :s_port => "1",
          :dest_port => "所有端口", :d_port => "1", :translation_as => "出接口地址", :ip_scope => "", :one_ip => ""})
    end
    # 移动地址转换规则,原来的顺序是:source300,source301,source302,source303,移动后的顺序:source302,source303,source300,source301
    assert_success do
      @address_translation.move_address_translation({:names => "source302&source303", :serial_num => "1", :location => "之前"})
    end
    # 移动地址转换规则,原来的顺序是:source302,source303,source300,source301,移动后的顺序:source302,source301,source303,source300
    assert_success do
      @address_translation.move_address_translation({:names => "source301", :serial_num => "2", :location => "之前"})
    end
    # 移动地址转换规则,原来的顺序是:source302,source301,source303,source300,移动后的顺序:source302,source301,source303,source300
    assert_success do
      @address_translation.move_address_translation({:names => "source302", :serial_num => "1", :location => "之前"})
    end
    # 移动地址转换规则,原来的顺序是:source302,source301,source303,source300,移动后的顺序:source302,source303,source301,source300
    assert_success do
      @address_translation.move_address_translation({:names => "source301", :serial_num => "3", :location => "之后"})
    end
    # 移动地址转换规则,原来的顺序是:source302,source303,source301,source300,移动后的顺序:source300,source302,source303,source301
    assert_success do
      @address_translation.move_address_translation({:names => "source300", :serial_num => "1", :location => "之前"})
    end
    # 移动地址转换规则,原来的顺序是:source300,source302,source303,source301,移动后的顺序:source300,source301,source302,source303
    assert_success do
      @address_translation.move_address_translation({:names => "source301", :serial_num => "1", :location => "之后"})
    end
    # 删除所有的地址转换
    assert_success do
      @address_translation.delete_address_translations({:delete_type => "全部删除", :names => ""})
    end
    # 删除所有的IP组
    assert_success do
      @ip_group.delete_ip_group({ :delete_type => "全部删除", :group_names => ""})
    end
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_add_and_delete_dns_mapping_rule
    # 新增DNSMapping
    assert_success do
      @address_translation.add_dns_mapping_rule({:domain_name => "www.aaa.com", :public_ip => "1.1.1.1", :local_ip => "2.2.2.2"})
    end
    # 新增DNSMapping,相同的公网IP
    assert_fail do
      @address_translation.add_dns_mapping_rule({:domain_name => "www.bbb.com", :public_ip => "1.1.1.1", :local_ip => "2.2.2.2"})
    end
    # 新增DNSMapping
    assert_success do
      @address_translation.add_dns_mapping_rule({:domain_name => "www.ccc.com", :public_ip => "3.1.1.1", :local_ip => "2.2.4.2"})
    end
    # 删除DNSMapping
    assert_success do
      @address_translation.delete_dns_mapping_rule({:delete_type => "部分删除", :public_ips => "1.1.1.1&3.1.1.1"})
    end
    # 新增DNSMapping
    assert_success do
      @address_translation.add_dns_mapping_rule({:domain_name => "www.ddd.com", :public_ip => "4.1.1.1", :local_ip => "2.2.5.2"})
    end
    # 检查DNSMapping
    assert_success do
      @address_translation.check_dns_mapping_rule_setting({:proto_type=>"UDP",:domain_name => "www.ddd.com", :public_ip => "4.1.1.1", :local_ip => "2.2.5.2"})
    end
    # 检查DNSMapping
    assert_hope("域名错误") do
      @address_translation.check_dns_mapping_rule_setting({:proto_type=>"UDP",:domain_name => "www.dd.com", :public_ip => "4.1.1.1", :local_ip => "2.2.5.2"})
    end
    # 检查DNSMapping
    assert_hope("内网ip地址错误") do
      @address_translation.check_dns_mapping_rule_setting({:proto_type=>"UDP",:domain_name => "www.ddd.com", :public_ip => "4.1.1.1", :local_ip => "3.2.5.2"})
    end
    # 检查DNSMapping
    assert_hope("公网ip地址不存在") do
      @address_translation.check_dns_mapping_rule_setting({:proto_type=>"UDP",:domain_name => "www.ddd.com", :public_ip => "3.1.1.1", :local_ip => "2.2.5.2"})
    end
    # 编辑DNSMapping,修改域名
    assert_hope("成功") do
      @address_translation.edit_dns_mapping_rule({:domain_name => "www.123.com", :public_ip => "4.1.1.1", :local_ip => "2.2.5.2"})
    end
    # 编辑DNSMapping,修改内网ip
    assert_hope("成功") do
      @address_translation.edit_dns_mapping_rule({:domain_name => "www.123.com", :public_ip => "4.1.1.1", :local_ip => "2.2.5.10"})
    end
    # 编辑DNSMapping,修改域名以及内网ip
    assert_hope("成功") do
      @address_translation.edit_dns_mapping_rule({:domain_name => "www.ddd.com", :public_ip => "4.1.1.1", :local_ip => "2.2.5.2"})
    end
     # 编辑DNSMapping,DNSMapping不存在
    assert_hope("DNSMapping不存在") do
      @address_translation.edit_dns_mapping_rule({:domain_name => "www.ddd.com", :public_ip => "3.1.1.1", :local_ip => "2.2.5.2"})
    end
    # 验证修改公网ip
    assert_hope("失败") do
      @address_translation.edit_dns_mapping_rule({:domain_name => "www.ddd.com", :new_public_ip => "3.1.1.1",:public_ip => "4.1.1.1", :local_ip => "2.2.5.2"})
    end
    # 删除所有的DNSMapping
    assert_success do
      @address_translation.delete_dns_mapping_rule({:delete_type => "全部删除", :public_ips => ""})
    end
  end
end