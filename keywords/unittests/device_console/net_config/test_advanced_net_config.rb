# coding: utf8
#
# This file is generated by att util tool.
# by 2011-12-07 17:28:43
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../../') unless $LOADED
require 'keywords/unittests/setup'

#$stdouttype = "GBK"

class TestAdvancedNetConfig < Test::Unit::TestCase
  def setup
    @common = Common.new
    @advanced_netconfig = DeviceConsole::NetConfig::AdvancedNetConfig.new

    assert_success do
      @common.set_current_device( $common["login_hash"] ) # 设置正确的当前设备的IP,用户名,密码
    end
    
  end
=begin
  def test_set_dns_server_and_proxy
    # 不设DNS服务器,启用代理
    assert_success do
      @advanced_netconfig.set_dns_server_and_proxy({:first_dns => "", :secondary_dns => "", :enable_dns_proxy => "是"})
    end
    # 不设DNS服务器,禁用代理
    assert_success do
      @advanced_netconfig.set_dns_server_and_proxy({:first_dns => "", :secondary_dns => "", :enable_dns_proxy => "否"})
    end
    # 设DNS服务器,禁用代理
    assert_success do
      @advanced_netconfig.set_dns_server_and_proxy({:first_dns => "1.1.1.1", :secondary_dns => "", :enable_dns_proxy => "否"})
    end
    # 设DNS服务器,禁用代理
    assert_success do
      @advanced_netconfig.set_dns_server_and_proxy({:first_dns => "1.1.1.1", :secondary_dns => "2.2.2.2", :enable_dns_proxy => "否"})
    end
    # 不设DNS服务器,启用代理
    assert_success do
      @advanced_netconfig.set_dns_server_and_proxy({:first_dns => "", :secondary_dns => "", :enable_dns_proxy => "是"})
    end
    # 设置错误格式的DNS服务器,禁用代理
    assert_fail do
      @advanced_netconfig.set_dns_server_and_proxy({:first_dns => "1.1.1", :secondary_dns => "", :enable_dns_proxy => "否"})
    end
  end

  def test_enable_disable_snmp
    # 启用SNMP
    assert_success do
      @advanced_netconfig.enable_disable_snmp({:operation => "启用"})
    end
    # 禁用SNMP
    assert_success do
      @advanced_netconfig.enable_disable_snmp({:operation => "禁用"})
    end
  end
  def test_add_and_edit_and__delete_snmp_host_manager
    # 删除所有的snmp管理主机
    assert_success do
      @advanced_netconfig.delete_snmp_host_manager({:delete_type => "全部删除", :names => ""})
    end
    # 新增snmp管理主机,主机地址类型
    assert_success do
      @advanced_netconfig.add_snmp_host_manager({:name => "snmp1", :addr_type => "主机", :address => "2.2.2.2", :community_name => "public"})
    end
    # 编辑snmp管理主机,主机地址类型
    assert_success do
      @advanced_netconfig.edit_snmp_host_manager({:name => "snmp1", :addr_type => "主机", :address => "2.2.2.5", :community_name => "public"})
    end
    # 新增snmp管理主机,子网地址类型
    assert_success do
      @advanced_netconfig.add_snmp_host_manager({:name => "snmp2", :addr_type => "子网", :address => "3.2.2.2/24", :community_name => "public"})
    end
    # 删除所有的snmp管理主机
    assert_success do
      @advanced_netconfig.delete_snmp_host_manager({:delete_type => "部分删除", :names => "snmp1&snmp2"})
    end
    # 新增snmp管理主机,子网地址类型,地址错误
    assert_fail do
      @advanced_netconfig.add_snmp_host_manager({:name => "snmp3", :addr_type => "子网", :address => "3.2.2.2", :community_name => "public"})
    end
    # 删除所有的snmp管理主机
    assert_success do
      @advanced_netconfig.delete_snmp_host_manager({:delete_type => "全部删除", :names => ""})
    end
  end
=end

  def test_add_arp_table
    # 新增arp表项，接口为自动检测成功
    assert_success do
      @advanced_netconfig.add_arp_table({:ip_address => "200.200.90.15", :mac_address => "11:11:15:15:15:15"})
    end
=begin
    # 新增arp表项，接口为指定值
    assert_success do
      @advanced_netconfig.add_arp_table({:ip_address => "200.200.63.1", :mac_address => "11:11:15:15:15:15", :eth => "eth0"})
    end
    #重复的IP地址
    assert_fail do
      @advanced_netconfig.add_arp_table({:ip_address => "200.200.63.1", :mac_address => "11:11:15:15:15:15", :eth => "eth0"})
    end
    #错误的MAC地址
    assert_fail do
      @advanced_netconfig.add_arp_table({:ip_address => "200.200.63.2", :mac_address => "11:11:15", :eth => "eth0"})
    end
    #自动检测失败
    assert_fail do
      @advanced_netconfig.add_arp_table({:ip_address => "100.200.63.3", :mac_address => "11:11:15:15:15:15", :eth => "自动检测"})
    end
=end
  end
=begin
  def test_auto_get_mac_address
    #可ping的Ip地址
    assert_success do
      @advanced_netconfig.auto_get_mac_address({:ip_address => "200.200.88.105"})
    end
    #不可ping的Ip地址
    assert_fail do
      @advanced_netconfig.auto_get_mac_address({:ip_address => "1.1.1.1"})
    end
  end

  def test_edit_arp_table
    #修改MAC地址
    assert_success do
      @advanced_netconfig.edit_arp_table({:old_ip_address => "200.200.63.1", :mac_address => "15:15:15:15:15:15", :eth => "eth0"})
    end
    #修改IP地址
    assert_success do
      @advanced_netconfig.edit_arp_table({:old_ip_address => "200.200.90.15",:ip_address => "200.200.90.16", :mac_address => "15:15:15:15:15:15", :eth => "eth0"})
    end
    #修改接口
    assert_success do
      @advanced_netconfig.edit_arp_table({:old_ip_address => "200.200.63.1", :mac_address => "15:15:15:15:15:15", :eth => "eth1"})
    end
  end

  def test_delete_arp_table
    assert_success do
      @advanced_netconfig.add_arp_table({:ip_address => "200.200.90.10", :mac_address => "11:11:15:15:15:15"})
    end
    assert_success do
      @advanced_netconfig.add_arp_table({:ip_address => "200.200.90.11", :mac_address => "11:11:15:15:15:15"})
    end
    assert_success do
      @advanced_netconfig.add_arp_table({:ip_address => "200.200.90.12", :mac_address => "11:11:15:15:15:15"})
    end
    #要删除的IP不存在
    assert_fail do
      @advanced_netconfig.delete_arp_table({:ips => "10.11.12.13"})
    end
    #部分删除
    assert_success do
      @advanced_netconfig.delete_arp_table({:ips => "200.200.90.1"})
    end
    #全部删除
    assert_success do
      @advanced_netconfig.delete_arp_table({:delete_type => "全部删除"})
    end
  end
  def test_enable_disable_dhcp
    #启用DHCP
    assert_success do
      @advanced_netconfig.enable_disable_dhcp({:operation => "启用"})
    end
    #禁用DHCP
    assert_success do
      @advanced_netconfig.enable_disable_dhcp({:operation => "禁用"})
    end
  end

  def test_edit_dhcp
    #指定配置
    assert_success do
      @advanced_netconfig.edit_dhcp({:interface => "eth3",:lease => "200",:gw => "15.15.15.15",:slave_dns => "8.8.8.8",\
      :range => "1.1.1.1-1.1.1.255&1.1.2.1-1.1.2.255",:reserved => "test1/1.1.1.115/11:55:11:11:11:11/pc1&test2/1.1.2.1/12:55:12:12:12:12/pc2"})
    end
     #测试默认值
    assert_success do
      @advanced_netconfig.edit_dhcp({:interface => "eth3"})
    end
  end

  def test_add_snmp_v3_rule
    #新增一条需要加密的SNMP V3规则
    assert_success do
      @advanced_netconfig.add_snmp_v3_rule({:name => "test1",:pubkey => "12345678",:confirm_pubkey =>"12345678",\
            :prikey => "87654321",:confirm_prikey => "87654321"
        })
    end
    #新增一条不需要加密的SNMP V3规则
    assert_success do
      @advanced_netconfig.add_snmp_v3_rule({:name => "test2",:pubkey => "12345678",:confirm_pubkey =>"12345678",\
            :prikey => "87654321",:confirm_prikey => "87654321",:safelevel => "不加密"
        }
      )
    end
     #新增一条错误的SNMP V3规则
    assert_fail do
      @advanced_netconfig.add_snmp_v3_rule({:name => "test3",:pubkey => "12345678",:confirm_pubkey =>"",\
            :prikey => "87654321",:confirm_prikey => "87654321",:safelevel => "不加密"
        }
      )
    end
  end

   def test_edit_snmp_v3_rule
     #编辑一条SNMP V3规则,修改加密级别
    assert_success do
      @advanced_netconfig.edit_snmp_v3_rule({:name => "test2",:pubkey => "12345678",:confirm_pubkey =>"12345678",\
            :prikey => "87654321",:confirm_prikey => "87654321",:safelevel => "加密"
        }
      )
    end
     #编辑一条SNMP V3规则，规则不存在
    assert_fail do
      @advanced_netconfig.edit_snmp_v3_rule({:name => "test3",:pubkey => "12345678",:confirm_pubkey =>"12345678",\
            :prikey => "87654321",:confirm_prikey => "87654321",:safelevel => "加密"
        }
      )
    end
   end

  def test_delete_snmp_v3_rule
    assert_success do
      @advanced_netconfig.add_snmp_v3_rule({:name => "test3",:pubkey => "12345678",:confirm_pubkey =>"12345678",\
            :prikey => "87654321",:confirm_prikey => "87654321",:safelevel => "加密"
        }
      )
    end
    assert_success do
      @advanced_netconfig.add_snmp_v3_rule({:name => "test4",:pubkey => "12345678",:confirm_pubkey =>"12345678",\
            :prikey => "87654321",:confirm_prikey => "87654321",:safelevel => "加密"
        }
      )
    end
    #部分删除,规则存在
    assert_success do
      @advanced_netconfig.delete_snmp_v3_rule({:delete_type => "部分删除", :names => "test1&test3"}
      )
    end
    #部分删除,规则不存在
    assert_fail do
      @advanced_netconfig.delete_snmp_v3_rule({:delete_type => "部分删除", :names => "test5"}
      )
    end
    #全部删除
    assert_success do
      @advanced_netconfig.delete_snmp_v3_rule({:delete_type => "全部删除"}
      )
    end
  end
=end
end