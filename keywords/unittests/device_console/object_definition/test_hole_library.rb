# coding: utf8
#
# This file is generated by att util tool.
# by 2012-05-24 20:07:57
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../../') unless $LOADED
require 'keywords/unittests/setup'

$stdouttype = "GBK"

class TestHoleLibrary < Test::Unit::TestCase
  def setup
    @common = Common.new
    @hole_library = keyword_proxy_for_class_name( DeviceConsole::ObjectDefinition::HoleLibrary ).new

    assert_success do
      @common.set_current_device( $common["login_hash"] ) # 设置正确的当前设备的IP,用户名,密码
    end
  end
  
  def test_edit_hole_recognition_library
    # 编辑存在的漏洞
    assert_success do
      @hole_library.edit_hole_recognition_library({:hole_id => "11020001", :operation => "检测后拦截"})
    end
    # 编辑存在的漏洞
    assert_success do
      @hole_library.edit_hole_recognition_library({:hole_id => "11020001", :operation => "检测后放行"})
    end
    # 编辑存在的漏洞
    assert_success do
      @hole_library.edit_hole_recognition_library({:hole_id => "11020001", :operation => "与云分析引擎联动"})
    end
    # 编辑存在的漏洞
    assert_success do
      @hole_library.edit_hole_recognition_library({:hole_id => "11020001", :operation => "禁用"})
    end
    # 编辑存在的漏洞
    assert_success do
      @hole_library.edit_hole_recognition_library({:hole_id => "11020001", :operation => "检测后拦截"})
    end
    # 编辑不存在的漏洞
    assert_fail do
      @hole_library.edit_hole_recognition_library({:hole_id => "000000000000000000", :operation => "禁用"})
    end
  end
  
end