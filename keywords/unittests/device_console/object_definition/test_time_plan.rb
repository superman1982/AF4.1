# coding: utf8
#
# This file is generated by att util tool.
# by 2011-12-07 19:53:55
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../../') unless $LOADED
require 'keywords/unittests/setup'

$stdouttype = "GBK"

class TestTimePlan < Test::Unit::TestCase
  def setup
    @common = Common.new
    @time_plan = DeviceConsole::ObjectDefinition::TimePlan.new

    assert_success do
      @common.set_current_device( $common["login_hash"] ) # 设置正确的当前设备的IP,用户名,密码
    end
  end

  def test_add_and_delete_single_time_plan
    # 删除所有的单次时间计划
    assert_success do
      @time_plan.delete_single_time_plan({:delete_type => "全部删除", :names => ""})
    end
    # 新增单次时间计划,正常,开始时间小于结束时间
    assert_success do
      @time_plan.add_single_time_plan({:name => "single1", :start_time => "2011-12-07#12:30:05", :end_time => "2011-12-07#12:30:10"})
    end
    # 新增单次时间计划,正常,开始时间等于结束时间
    assert_success do
      @time_plan.add_single_time_plan({:name => "single2", :start_time => "2011-12-07#12:10:00", :end_time => "2011-12-07#12:10:00"})
    end
    # 删除单次时间计划
    assert_success do
      @time_plan.delete_single_time_plan({:delete_type => "部分删除", :names => "single1"})
    end
    # 新增单次时间计划,异常,开始日期等于结束日期,开始时间大于结束时间
    assert_hope("开始时间大于结束时间") do
      @time_plan.add_single_time_plan({:name => "single3", :start_time => "2011-12-07#12:30:10", :end_time => "2011-12-07#12:30:00"})
    end
    # 新增单次时间计划,异常,开始日期大于结束日期,开始时间等于结束时间
    assert_hope("开始时间大于结束时间") do
      @time_plan.add_single_time_plan({:name => "single4", :start_time => "2011-12-12#12:30:10", :end_time => "2011-12-7#12:30:10"})
    end
    # 新增单次时间计划,异常,开始日期大于结束日期,开始时间小于结束时间
    assert_hope("开始时间大于结束时间") do
      @time_plan.add_single_time_plan({:name => "single5", :start_time => "2011-12-12#12:00:10", :end_time => "2011-12-7#12:30:10"})
    end
    # 删除所有的单次时间计划
    assert_success do
      @time_plan.delete_single_time_plan({:delete_type => "全部删除", :names => ""})
    end
  end

  def test_add_and_delete_loop_time_plan
    # 删除所有的循环时间计划
    assert_success do
      @time_plan.delete_loop_time_plan({:delete_type => "全部删除", :names => ""})
    end
     # 新增循环时间计划,正常,开始周期等于结束周期,开始时间小于结束时间
    assert_success do
      @time_plan.add_loop_time_plan({:name => "loop0", :description => "描述", :time_slots => "星期一-星期一##20点05分-22点30分"})
    end
    # 新增循环时间计划,异常,开始周期等于结束周期,开始时间等于结束时间
    assert_hope("开始时间应小于结束时间") do
      @time_plan.add_loop_time_plan({:name => "loop1", :description => "描述", :time_slots => "星期二-星期二##12点05分-12点05分&星期四-星期四##10点10分-10点10分"})
    end
    # 新增循环时间计划,异常,开始周期等于结束周期,开始时间大于结束时间
    assert_hope("开始时间应小于结束时间") do
      @time_plan.add_loop_time_plan({:name => "loop2", :description => "描述", :time_slots => "星期一-星期一##20点05分-18点30分"})
    end
    # 新增循环时间计划,异常,开始周期小于结束周期,开始时间大于结束时间
    assert_hope("开始时间应小于结束时间") do
      @time_plan.add_loop_time_plan({:name => "loop3", :description => "描述", :time_slots => "星期一-星期二##23点00分-10点00分"})
    end
    # 新增循环时间计划,异常,开始周期小于结束周期,开始时间等于结束时间
    assert_hope("开始时间应小于结束时间") do
      @time_plan.add_loop_time_plan({:name => "loop4", :description => "描述", :time_slots => "星期一-星期二##10点00分-10点00分"})
    end
    # 新增循环时间计划,正常,开始周期小于结束周期,开始时间小于结束时间
    assert_success do
      @time_plan.add_loop_time_plan({:name => "loop5", :description => "描述", :time_slots => "星期二-星期三##12点05分-18点30分&星期五-星期六##00点05分-10点30分"})
    end
    # 新增循环时间计划,异常,开始周期大于结束周期,开始时间小于结束时间
    assert_hope("开始周期应不大于结束周期") do
      @time_plan.add_loop_time_plan({:name => "loop6", :description => "描述", :time_slots => "星期五-星期一##12点05分-18点30分"})
    end
    # 新增循环时间计划,异常,开始周期大于结束周期,开始时间大于结束时间
    assert_hope("开始周期应不大于结束周期") do
      @time_plan.add_loop_time_plan({:name => "loop7", :description => "描述", :time_slots => "星期五-星期一##20点05分-18点30分"})
    end
    # 新增循环时间计划,异常,开始周期大于结束周期,开始时间等于结束时间
    assert_hope("开始周期应不大于结束周期") do
      @time_plan.add_loop_time_plan({:name => "loop8", :description => "描述", :time_slots => "星期五-星期一##18点30分-18点30分"})
    end
    # 删除循环时间计划
    assert_success do
      @time_plan.delete_loop_time_plan({:delete_type => "部分删除", :names => "loop0&loop5"})
    end

    # 新增循环时间计划,异常,格式错误
    assert_hope("时间段格式错误") do
      @time_plan.add_loop_time_plan({:name => "loop9", :description => "", :time_slots => "星期五-星期一#18点30分-18点30分"})
    end
    # 新增循环时间计划,异常,格式错误
    assert_hope("时间段格式错误") do
      @time_plan.add_loop_time_plan({:name => "loop10", :description => "", :time_slots => "-星期一##18点30分-18点30分"})
    end
    # 新增循环时间计划,异常,格式错误
    assert_hope("时间段格式错误") do
      @time_plan.add_loop_time_plan({:name => "loop11", :description => "", :time_slots => "星期五-##18点30分-18点30分"})
    end
    # 新增循环时间计划,异常,格式错误
    assert_hope("时间段格式错误") do
      @time_plan.add_loop_time_plan({:name => "loop12", :description => "", :time_slots => "星期五-星期一##18点30分-"})
    end
    # 新增循环时间计划,异常,格式错误
    assert_hope("时间段格式错误") do
      @time_plan.add_loop_time_plan({:name => "loop13", :description => "", :time_slots => "星期五-星期一##-18点30分"})
    end
    # 新增循环时间计划,异常,格式错误
    assert_hope("不支持的周期") do
      @time_plan.add_loop_time_plan({:name => "loop14", :description => "", :time_slots => "星期九-星期八##18点20分-18点30分"})
    end
    # 新增循环时间计划,异常,格式错误
    assert_hope("时间格式错误") do
      @time_plan.add_loop_time_plan({:name => "loop15", :description => "", :time_slots => "星期五-星期一##1830分-18点30"})
    end
    # 新增循环时间计划,异常,格式错误
    assert_hope("时间格式错误") do
      @time_plan.add_loop_time_plan({:name => "loop15", :description => "", :time_slots => "星期五-星期一##18:30-18:30"})
    end
  end

end