# coding: utf8
#
# This file is generated by att util tool.
# by 2011-12-08 16:41:39
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../../') unless $LOADED
require 'keywords/unittests/setup'

$stdouttype = "GBK"

class TestPackageHoldup < Test::Unit::TestCase
  
  def setup
    @common = Common.new
    @package_holdup = DeviceConsole::SystemMantenance::PackageHoldup.new

    assert_success do
      @common.set_current_device( $common["login_hash"] ) # 设置正确的当前设备的IP,用户名,密码
    end
  end

  def test_enable_disable_realtime_holdup_log
    # 启用实时日志拦截
    assert_success do
      @package_holdup.enable_disable_realtime_holdup_log({:operation => "启用"})
    end
    # 禁用实时日志拦截
    assert_success do
      @package_holdup.enable_disable_realtime_holdup_log({:operation => "禁用"})
    end
  end

  def test_enable_realtime_holdup_log_and_bypass
    # 开启实时拦截日志并直通
    assert_success do
      @package_holdup.enable_realtime_holdup_log_and_bypass({})
    end
    # 禁用实时日志拦截
    assert_success do
      @package_holdup.enable_disable_realtime_holdup_log({:operation => "禁用"})
    end
  end

  def test_set_enable_condition_and_enable
    # 设置开启条件并开启实时拦截日志,不开启直通
    assert_success do
      @package_holdup.set_enable_condition_and_enable({:accept_ips => "11.11.11.1&111.11.11.0", :reject_ips => "11.11.11.2&211.11.11.1-211.11.11.11",
          :protocol => "所有", :protocol_num => "", :port_type => "所有端口", :port => "", :operation => "开启"})
    end
    # 禁用实时日志拦截
    assert_success do
      @package_holdup.enable_disable_realtime_holdup_log({:operation => "禁用"})
    end
    # 设置开启条件并开启实时拦截日志,不开启直通
    assert_success do
      @package_holdup.set_enable_condition_and_enable({:accept_ips => "11.11.11.1&111.11.11.0", :reject_ips => "11.11.11.2&211.11.11.1-211.11.11.11",
          :protocol => "TCP", :protocol_num => "", :port_type => "所有端口", :port => "", :operation => "开启"})
    end
    # 禁用实时日志拦截
    assert_success do
      @package_holdup.enable_disable_realtime_holdup_log({:operation => "禁用"})
    end
    # 设置开启条件并开启实时拦截日志,不开启直通
    assert_success do
      @package_holdup.set_enable_condition_and_enable({:accept_ips => "11.11.11.1&111.11.11.0", :reject_ips => "11.11.11.2&211.11.11.1-211.11.11.11",
          :protocol => "TCP", :protocol_num => "", :port_type => "指定端口", :port => "555", :operation => "开启"})
    end
    # 禁用实时日志拦截
    assert_success do
      @package_holdup.enable_disable_realtime_holdup_log({:operation => "禁用"})
    end
    # 设置开启条件并开启实时拦截日志,开启直通
    assert_success do
      @package_holdup.set_enable_condition_and_enable({:accept_ips => "11.11.11.1&111.11.11.0", :reject_ips => "11.11.11.2&211.11.11.1-211.11.11.11",
          :protocol => "TCP", :protocol_num => "", :port_type => "指定端口", :port => "555", :operation => "开启并直通"})
    end
    # 禁用实时日志拦截
    assert_success do
      @package_holdup.enable_disable_realtime_holdup_log({:operation => "禁用"})
    end
  end

  def test_check_realtime_holdup_logs
    assert_success do
      @package_holdup.check_realtime_holdup_logs({:s_ip => "app control", :operation => "drop the packet",\
            :protocol => "tcp", :content => "192.168.101.2", :device => "", :link => "eth1 -> eth2",\
            :drop_flag => "appcontrol", :app_name => "网站浏览", :app_rule => "http_download"})
    end
    assert_hope("无拦截日志") do
      @package_holdup.check_realtime_holdup_logs({:s_ip => "", :operation => "",\
            :protocol => "", :content => "", :device => "", :link => "",\
            :drop_flag => "", :app_name => "", :app_rule => ""})
    end
  end

end