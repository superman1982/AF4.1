=begin rdoc
模块名: 设备控制台
描述: 封装设备控制台上的操作
=end
module DeviceConsole

  module_function
  
  # 获取当前所有object_type的名称,返回数组类型
  def get_all_object_names(list_cgi, object_type)
    return get_all_object_attrib(list_cgi,object_type,"name")
  end
  
  # 获取当前所有object_type的attri_name名字的属性值,返回数组类型
  # 添加了一个扩展hash,方便日后扩展功能,现在加了一个过滤功能,根据hash里面的 filter_name filter_value filter_equal 来构成过滤条件
  # 王沃伦添加
  def get_all_object_attrib(list_cgi, object_type, attrib_name,extern_hash={})
    attribs = [] # 存放所有object_type的名称
    if extern_hash["list_opr"] == nil
      all_objects = list_all_objects(list_cgi, object_type)
    else
      all_objects = list_all_objects(list_cgi, object_type,{"list_opr" =>extern_hash["list_opr"]})
    end
    all_objects.each do |object|
      if extern_hash["filter_name"] != nil and extern_hash["filter_value"] != nil
        if extern_hash["filter_equal"] == true  # => 如果是要过滤掉等于的数据的话
          if object[extern_hash["filter_name"]] == extern_hash["filter_value"]
            ATT::KeyLog.debug("过滤了 #{extern_hash["filter_name"]} == #{extern_hash["filter_value"]} 的键值 : #{object[extern_hash["filter_name"]]}")
            next
          end
        else
          if object[extern_hash["filter_name"]] != extern_hash["filter_value"]
            ATT::KeyLog.debug("过滤了 #{extern_hash["filter_name"]} != #{extern_hash["filter_value"]} 的键值 : #{object[extern_hash["filter_name"]]}")
            next
          end
        end
      end
      attribs << object[attrib_name]
    end
    ATT::KeyLog.debug("所有#{object_type}的 #{attrib_name}属性值是 :#{attribs.join(',')}")
    return attribs
  end
  
  # 获取所有object_type列表,返回数组,元素类型是hash
  def list_all_objects(list_cgi, object_type,list_hash = {"list_opr" =>"list"})
    post_hash = {"opr" => list_hash["list_opr"]}
    result_hash = AF::Login.get_session().post(list_cgi, post_hash)
    if result_hash["success"]
      return result_hash["data"] # 数组的元素类型是hash
    else
      ATT::KeyLog.info("获取#{object_type}列表失败,错误消息是#{result_hash["msg"]}")
      raise ATT::Exceptions::NotFoundError,"获取列表失败"
    end
  end
  # 获取所有object_type列表,返回数组,元素类型是hash
  def list_all_objects_with_limit(list_cgi, object_type)
    post_hash = {"opr" => "list", "start" => 0, "limit" => 65535}
    result_hash = AF::Login.get_session().post(list_cgi, post_hash)
    if result_hash["success"]
      return result_hash["data"] # 数组的元素类型是hash
    else
      ATT::KeyLog.info("获取#{object_type}列表失败,错误消息是#{result_hash["msg"]}")
      raise ATT::Exceptions::NotFoundError,"获取列表失败"
    end
  end
  
  # 转换生效时间,根据时间计划的名称,获取其在下拉列表中的value
  def convert_active_time( take_effect_time )
    post_hash = {"opr" => "listAllTime" }
    result_hash = AF::Login.get_session().post("/cgi-bin/objtime.cgi", post_hash)
    if result_hash["success"]
      all_time_plans = result_hash["data"] # 数组,元素类型是hash,格式{"name"=>"", "value"=>"", "depict"=>""}
      all_time_plans.each do |time_plan|
        if time_plan["name"] == take_effect_time
          ATT::KeyLog.info("获取时间计划列表成功,#{take_effect_time}对应的值是#{time_plan["value"]}")
          return time_plan["value"]
        end
      end
      ATT::KeyLog.info("时间计划:#{take_effect_time}不存在")
      raise ATT::Exceptions::NotFoundError,"不存在的时间计划"
    else
      ATT::KeyLog.info("获取时间计划列表失败,错误消息是#{result_hash["msg"]}")
      raise ATT::Exceptions::NotFoundError,"获取时间计划列表失败"
    end
  end

  # => 检查post后返回的信息,其中
  #  cgi : 提交的cgi路径
  #  post_hash : 需要提交的hash格式的jason数据 (cookie信息自动加上,AF上面就是csrf)
  #  other_hash : 这个是其他用途的hash,暂时只用作打印调试信息时的模块对应信息
  #  expectd_name : 检查返回hash中的某个键的名字
  #  expectd_str : 检查某个返回hash中的值,用正则来匹配,可以输入正则
  def check_post_result(cgi,post_hash,other_hash,expectd_name = "", expectd_str = "")
    result_hash = AF::Login.get_session().post(cgi, post_hash)
    other_hash["info"] = "没提供错误模块信息~!!" if other_hash["info"] == nil or other_hash["info"] ==""
    if expectd_name != nil and expectd_name != ""
      if result_hash[expectd_name] =~ Regexp.new(expectd_str)
        raise ATT::Exceptions::RightExecuteError,"成功"
      else
        ATT::KeyLog.error("#{other_hash["info"]}......错误消息是#{result_hash["msg"]}")
        raise ATT::Exceptions::RightExecuteError,"失败"
      end
    end
    if result_hash["success"]
      raise ATT::Exceptions::RightExecuteError,"成功"
    else
      ATT::KeyLog.error("#{other_hash["info"]}......错误消息是#{result_hash["msg"]}")
      raise ATT::Exceptions::RightExecuteError,"失败"
    end
  end
  
end
