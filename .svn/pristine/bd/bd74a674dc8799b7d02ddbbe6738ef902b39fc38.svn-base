# coding: utf8
#
# This file is generated by att util tool.
# by 2011-12-07 17:47:01
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../../') unless $LOADED
require 'keywords/unittests/setup'

#$stdouttype = "GBK"

class TestUserAuthentication < Test::Unit::TestCase
  def setup
    @common = Common.new
    @userau = DeviceConsole::CertificationSystem::UserAuthentication.new
    @interface_zone = DeviceConsole::NetConfig::InterfaceZone.new
    
    assert_success do
      @common.set_current_device( $common["login_hash"] ) # 设置正确的当前设备的IP,用户名,密码
    end
  end
=begin
  def test_enable_disable_user_authenticate
    # 启用用户认证
    assert_hope("成功") do
      @userau.enable_disable_user_authenticate({:operation => "启用"})
    end
    # 禁用用户认证
    assert_hope("成功") do
      @userau.enable_disable_user_authenticate({:operation => "禁用"})
    end
  end


  def test_set_authenticate_zone
    # 删除所有的区域
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
    # 新增区域zone1
    assert_success do
      @interface_zone.add_zone(:name => "zone1", :forward_type => "三层区域", :interfaces => "eth3",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增区域zone2
    assert_success do
      @interface_zone.add_zone(:name => "zone2", :forward_type => "三层区域", :interfaces => "eth4",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 新增区域zone3
    assert_success do
      @interface_zone.add_zone(:name => "zone3", :forward_type => "三层区域", :interfaces => "eth5",
        :enable_webui => "是", :enable_ssh => "是", :enable_snmp => "是", :manage_address => "全部")
    end
    # 设置认证区域为zone1
    assert_hope("成功") do
      @userau.set_authenticate_zone({:zones => "zone1"})
    end
    # 设置认证区域为zone2
    assert_hope("成功") do
      @userau.set_authenticate_zone({:zones => "zone2"})
    end
    #设置认证区域为zone1和zone2
    assert_hope("成功") do
      @userau.set_authenticate_zone({:zones => "zone1&zone2"})
    end
    # 设置认证区域为zone1&zone2&zone3
    assert_hope("成功") do
      @userau.set_authenticate_zone({:zones => "zone1&zone2&zone3"})
    end
    # 认证区域清空（清理现场）
    assert_hope("成功") do
      @userau.set_authenticate_zone({:zones => ""})
    end
    # 删除所有的区域（清理现场）
    assert_success do
      @interface_zone.delete_zone( {:delete_type => "全部删除", :names => ""})
    end
  end

  def test_add_and_edit_authenticate_rule
    #测试默认值,一个IP/MAC
    assert_success do
      @userau.add_authenticate_rule({:name => "test1", :ipmac => "1.1.1.1"})
    end
    #测试默认值,多个IP/MAC
    assert_success do
      @userau.add_authenticate_rule({:name => "test2", :ipmac => "1.1.1.1&11:11:11:11:11:11&2.2.2.2"})
    end
     #测试把MAC作为用户名
    assert_success do
      @userau.add_authenticate_rule({:name => "test3", :ipmac => "1.1.1.1",:noauth => "把MAC作为用户名"})
    end
     #测试认证方式为本地密码认证/外部密码认证/单点登录
    assert_success do
      @userau.add_authenticate_rule({:name => "test4", :ipmac => "1.1.1.1",:authway => "本地密码认证/外部密码认证/单点登录"})
    end
      #测试认证方式为必须使用单点登录
    assert_success do
      @userau.add_authenticate_rule({:name => "test5", :ipmac => "1.1.1.1",:authway => "必须使用单点登录",:exceptuser => "test5"})
    end
     #测试新用户选项,添加到指定的本地组中
    assert_success do
      @userau.add_authenticate_rule({:name => "test6", :ipmac => "1.1.1.1",:path => "/默认组/",:auto => "是",:publiclimit => "仅允许一人使用",:ipmaclimit => "是",\
      :ipmac_bind => "单向绑定",:select => "仅绑定MAC",})
    end
     #测试新用户选项,仅作为临时帐号
    assert_success do
      @userau.add_authenticate_rule({:name => "test7", :ipmac => "1.1.1.1",:newoption => "仅作为临时帐号",:rightpath => "/默认组/"})
    end
    #测试新用户选项,仅作为临时帐号
    assert_success do
      @userau.add_authenticate_rule({:name => "test8", :ipmac => "1.1.1.1",:newoption => "不允许新用户认证"})
    end

    #测试编辑策略
    assert_success do
      @userau.edit_authenticate_rule({:name => "test1", :ipmac => "2.2.2.2"})
    end
     #测试编辑策略,策略不存在
    assert_fail do
      @userau.edit_authenticate_rule({:name => "test10", :ipmac => "2.2.2.2"})
    end

  end
  def test_delete_authenticate_rule

    #部分删除
     assert_success do
      @userau.delete_authenticate_rule({:names => "test1&test3&test5"})
    end

    #部分删除,名称不存在
     assert_fail do
      @userau.delete_authenticate_rule({:names => "test10"})
    end
    #全部删除
     assert_success do
      @userau.delete_authenticate_rule({:delete_type => "全部删除"})
    end
  end
=end
   def test_edit_authenticate_option
     #测试默认值
     assert_success do
       @userau.edit_authenticate_option({})
     end
     #测试域单点登录
     assert_success do
       @userau.edit_authenticate_option({:enable_domain => "是",:auto => "是",:sharekey => "123456",:listen => "是",:domain_server => "1.1.11.1&1.5.6.7:8888&3.6.9.12"})
     end
      #测试Proxy单点登录
     assert_success do
       @userau.edit_authenticate_option({:enable_proxy => "是",:proxy_server => "1.1.1.1&3.6.9.12"})
     end
      #测试Pop3单点登录
     assert_success do
       @userau.edit_authenticate_option({:enable_pop3 => "是",:pop3_server => "1.1.1.1&3.6.9.12"})
     end
      #测试Web单点登录
     assert_success do
       @userau.edit_authenticate_option({:enable_web => "是",:web_server => "1.1.1.1",:server_opt => "是",:form => "test",:keyword_opt => "认证失败关键字",:success => "test_success",:failure => "test_failure"})
     end
     #测试其他选项
     assert_success do
       @userau.edit_authenticate_option({:enable_mirror => "是",:mirror_list => "eth3&eth5"})
     end
      #测试认证跳转
     assert_success do
       @userau.edit_authenticate_option({:jump => "自定义页面URL",:custom_url => "www.test.com"})
     end
     #测试认证冲突
     assert_success do
       @userau.edit_authenticate_option({:conflict => "强制注销以前的登录，在当前IP上认证通过"})
     end
     #测试跨三层MAC识别
     assert_success do
       @userau.edit_authenticate_option({:enable_snmp => "是",:timeout => "10",:interval => "10",:server_snmp => "1.1.1.1/11-11-11-11-11-11/1.6.9.5.8.1.5.5.6.4/public&3.1.1.1/13-11-11-11-11-11/3.6.9.5.8.1.5.5.6.4/public"})
     end
     #测试其他认证选项
     assert_success do
       @userau.edit_authenticate_option({:enable_autologout => "是",:logout_time => "150",:post => "是",:dns => "是",:base => "是",:chkmac => "是",:authfail => "是",:times => "10",:minutes => "5"})
     end
     #恢复默认值
     assert_success do
       @userau.edit_authenticate_option({})
     end
   end
end