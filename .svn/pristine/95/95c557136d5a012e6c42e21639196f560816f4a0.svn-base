# coding: utf-8
#
# This file is generated by att util tool.
# by 2012-12-24 15:58:43
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../../') unless $LOADED
require 'keywords/unittests/setup'
#$stdouttype = "GBK"
class TestPassageWay < Test::Unit::TestCase
  def setup
    #you can use $device_console_flux_manager_passage_way to quote hash as argument.
    @common = Common.new
    @o = keyword_proxy_for_class_name( DeviceConsole::FluxManager::PassageWay ).new
    assert_success do
      @common.set_current_device( $common["login_hash"] ) # 设置正确的当前设备的IP,用户名,密码
    end
  end
  
  def test_add_passage
    test_add_hash = []
#    test_add_hash << {:name => "基础默认数据"} # => 基础默认数据
#    test_add_hash << {:name => "线路",:line => "2"} # => 线路
#    test_add_hash << {:name => "保证带宽",:passage_type => "保证通道"} # => 保证带宽
#    test_add_hash << {:name => "带宽优先级_保证",:passage_type => "保证通道",:ensure_priority => "High" ,:limit_priority => "Low"} # => 带宽优先级
#    test_add_hash << {:name => "带宽优先级_限制",:passage_type => "限制通道",:ensure_priority => "Medium" ,:limit_priority => "High"} # => 带宽优先级
#    test_add_hash << {:name => "保证比率",:passage_type => "保证通道",:ensure_up_rate => "33",:ensure_upmax_rate => "34", :ensure_down_rate =>"55", :ensure_downmax_rate=>"56"} # => 保证比率
#    test_add_hash << {:name => "限制比率",:limit_upmax_rate => "38", :limit_downmax_rate=>"58"} # =>限制比率
#    test_add_hash << {:name => "高级选项",:is_enable_advance=>"是"} # => 高级选项
#    test_add_hash << {:name => "自定义应用",:apply_app_type=>"自定义",:custom_app_selected=>"文件类型@_@文件类型@_@音乐"} # => 基础默认数据
#    test_add_hash << {:name => "自定义应用_2",:apply_app_type=>"自定义",:custom_app_selected=>"网站类型@_@网站类型@_@大学"} # => 基础默认数据
#    test_add_hash << {:name => "自定义应用_3",:apply_app_type=>"自定义",:custom_app_selected=>"网站类型@_@金融@_@在线支付"} # => 基础默认数据
#    test_add_hash << {:name => "自定义应用_4",:apply_app_type=>"自定义",:custom_app_selected=>"应用类型@_@其他应用@_@其他应用"}
#    test_add_hash << {:name => "自定义应用_5",:apply_app_type=>"自定义",:custom_app_selected=>"应用类型@_@代理工具@_@迅游"}
#    test_add_hash << {:name => "源IP组",:apply_obj_type=>"IP组",:ip_group=>"just_test"} # => 基础默认数据
#    test_add_hash << {:name => "用户",:apply_obj_type=>"用户",:user_group=>"woolen"} # => 基础默认数据
#    test_add_hash << {:name => "生效时间",:time_group_name=>"1*1*asd"} # => 基础默认数据
#    test_add_hash << {:name => "目标IP组",:dstip_group=>"just_test"} # => 基础默认数据
#    test_add_hash << {:name => "子接口",:interface_selected=>"子接口", :sub_eth => "eth0.50"} # => 基础默认数据
#    test_add_hash << {:name => "vlan",:interface_selected=>"vlan", :vlan_eth => "50-100"} # => 基础默认数据
    
    test_add_hash.each { |test_hash|
      assert_success do
        @o.add_passage(test_hash)
      end
    }
  end
  
  def test_del_passage
    test_del_hash = []
#    test_del_hash << {} # => 默认删除全部
#    test_del_hash << {:name => "保证带宽"} # => 删除一个
#    test_del_hash << {:name => "子接口@;@源IP组"} # => 删除两个
#    test_del_hash << {:name => "自定义应用_2@;@自定义应用_3@;@自定义应用_4"} # => 删除两个
    test_del_hash.each { |test_hash|
      assert_success do
        @o.del_passage(test_hash)
      end
    }
  end

  def test_enable_disable_fluxmanage
    test_hashs = []
#    test_hashs << {} #默认启用
#    test_hashs << {:enable => "禁用"} #默认启用
    test_hashs.each { |test_hash|
      assert_success do
        @o.enable_disable_fluxmanage(test_hash)
      end
    }
  end
  
  def test_edit_passage
    test_hashs = []
#    test_hashs << {:name => "基础默认数据"} # => 基础默认数据
#    test_hashs << {:name => "线路",:line => "1"} # => 线路
#    test_hashs << {:name => "保证带宽",:passage_type => "限制通道"} # => 保证带宽
#    test_hashs << {:name => "带宽优先级_保证",:passage_type => "保证通道",:ensure_priority => "Medium" ,:limit_priority => "Low"} # => 带宽优先级
#    test_hashs << {:name => "带宽优先级_限制",:passage_type => "限制通道",:ensure_priority => "Medium" ,:limit_priority => "Low"} # => 带宽优先级
#    test_hashs << {:name => "保证比率",:passage_type => "保证通道",:ensure_up_rate => "13",:ensure_upmax_rate => "28", :ensure_down_rate =>"38", :ensure_downmax_rate=>"48"} # => 保证比率
#    test_hashs << {:name => "限制比率",:limit_upmax_rate => "28", :limit_downmax_rate=>"48"} # =>限制比率
#    test_hashs << {:name => "高级选项",:is_enable_advance=>"否"} # => 高级选项
#    test_hashs << {:name => "自定义应用",:apply_app_type=>"自定义",:custom_app_selected=>"文件类型@_@文件类型@_@图片"} # => 基础默认数据
#    test_hashs << {:name => "自定义应用_2",:apply_app_type=>"自定义",:custom_app_selected=>"网站类型@_@网站类型@_@幽默笑话"} # => 基础默认数据
#    test_hashs << {:name => "自定义应用_3",:apply_app_type=>"自定义",:custom_app_selected=>"网站类型@_@生活相关@_@社交"} # => 基础默认数据
#    test_hashs << {:name => "自定义应用_4",:apply_app_type=>"自定义",:custom_app_selected=>"应用类型@_@ICMP@_@ICMP协议"}
#    test_hashs << {:name => "源IP组",:apply_obj_type=>"IP组",:ip_group=>"全部"} # => 基础默认数据
#    test_hashs << {:name => "用户",:apply_obj_type=>"用户",:user_group=>"/"} # => 基础默认数据
#    test_hashs << {:name => "生效时间",:time_group_name=>"2*0*全天"} # => 基础默认数据
#    test_hashs << {:name => "目标IP组",:dstip_group=>"全部"} # => 基础默认数据
#    test_hashs << {:name => "子接口",:interface_selected=>"子接口", :sub_eth => "50"} # => 基础默认数据
#    test_hashs << {:name => "vlan",:interface_selected=>"vlan", :vlan_eth => "50-101"} # => 基础默认数据
    test_hashs.each { |test_hash|
      assert_success do
        @o.edit_passage(test_hash)
      end
    }
  end
  
  def test_add_exclude_rule
    test_hashs = []
#    test_hashs << {:name => "默认"} #默认启用
#    test_hashs << {:name => "FTP", :type => "FTP"}
#    test_hashs << {:name => "dip", :type => "FTP", :dip => "just_test"}
    test_hashs.each { |test_hash|
      assert_success do
        @o.add_exclude_rule(test_hash)
      end
    }
  end
  
  def test_edit_exclude_rule
    test_hashs = []
#    test_hashs << {:name => "默认"} #默认启用
#    test_hashs << {:name => "FTP", :type => "IM"}
#    test_hashs << {:name => "dip", :type => "FTP", :dip => "全部"}
    test_hashs.each { |test_hash|
      assert_success do
        @o.edit_exclude_rule(test_hash)
      end
    }
  end
  
  def test_del_exclude_rule
    test_hashs = []
    test_hashs << {:name => "FTP"}
    test_hashs << {:name => "dip"}
    test_hashs << {} #默认启用
    test_hashs.each { |test_hash|
      assert_success do
        @o.del_exclude_rule(test_hash)
      end
    }
  end
  
end