# coding: utf8
#
# This file is generated by att util tool.
# by 2012-05-25 10:27:32
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../') unless $LOADED
require 'keywords/unittests/setup'

$stdouttype = "utf-8"

class TestFileOperation < Test::Unit::TestCase
  def setup
    @lp_file_oper = keyword_proxy_for_class_name( LocalPc::FileOperation ).new
  end

=begin
  def test_add_built_in_hole_cfgfile
    # 危险等级'高',动作'检测后放行'
    assert_success do
      @lp_file_oper.add_built_in_hole_cfgfile({:hole_id => "100000", :hole_name => "Hole Name", :hole_desc => "hole desc",
        :impact => "Complete user access", :level => "高", :refers => "http://www.securityfocus.com/bid/46226&CVE-2011-0979&MS11-021",
        :solutions => "Update#Address&Update#Address", :action => "检测后放行", :type => "database" })
    end
    # 危险等级'中',动作'检测后拦截'
    assert_success do
      @lp_file_oper.add_built_in_hole_cfgfile({:hole_id => "100001", :hole_name => "Hole Name", :hole_desc => "hole desc",
        :impact => "Complete user access", :level => "中", :refers => "http://www.securityfocus.com/bid/46226",
        :solutions => "Update#Address", :action => "检测后拦截", :type => "database" })
    end
    # 危险等级'低',动作'与云分析引擎联动'
    assert_success do
      @lp_file_oper.add_built_in_hole_cfgfile({:hole_id => "100002", :hole_name => "Hole Name", :hole_desc => "hole desc",
        :impact => "Complete user access", :level => "低", :refers => "",
        :solutions => "", :action => "与云分析引擎联动", :type => "database" })
    end
    # 危险等级'高',动作'禁用'
    assert_success do
      @lp_file_oper.add_built_in_hole_cfgfile({:hole_id => "100003", :hole_name => "Hole Name", :hole_desc => "hole desc",
        :impact => "Complete user access", :level => "高", :refers => "",
        :solutions => "", :action => "禁用", :type => "database" })
    end
  end

  def test_add_hole_recognition_rule
    # 危险等级'高',动作'禁用'
    assert_success do
      @lp_file_oper.add_hole_recognition_rule({:hole_id => "100002", :hole_name => "Hole Name", :type => "database",
        :level => "高", :action => "禁用" })
    end
  end
  
  def test_add_web_hole_custom_rule_onefile
    assert_success do 
      @lp_file_oper.add_web_hole_custom_rule($common["webrule1"])
    end
  end    
  
  def test_add_web_hole_custom_rule_mutifile
    assert_success do 
      @lp_file_oper.add_web_hole_custom_rule($common["webrule1"])
    end
    assert_success do 
      @lp_file_oper.add_web_hole_custom_rule($common["webrule2"])
    end
  end
  
  def test_add_web_hole_custom_rule_mutifile_rebuid
    assert_success do 
      @lp_file_oper.add_web_hole_custom_rule($common["webrule1"])
    end
    assert_success do 
      @lp_file_oper.add_web_hole_custom_rule($common["webrulerebuild"])
    end  
  end
  
  def test_add_web_hole_custom_rule_mutifile_sid_increase
    assert_success do 
      @lp_file_oper.add_web_hole_custom_rule($common["websidincrease"])
    end  
  end

  def test_enctrypt_and_dectrypt
    assert_success do 
      @lp_file_oper.enctrypt_and_dectrypt({:action => "加密"})
    end
  end
  
  def test_enctrypt_and_dectrypt_failure
    assert_fail do 
      @lp_file_oper.enctrypt_and_dectrypt({:sourcefile => "yf:/",:action => "加密"})
    end
  end

  def test_check_common_file_content
    assert_success do
      @lp_file_oper.check_common_file_content({:file => "D:/af_bvt/project/branches/AF3.0/temp/windump.txt", :checkpoint => ""})
    end
    assert_fail do
      @lp_file_oper.check_common_file_content({:file => "D:/af_bvt/project/branches/AF3.0/temp/aaa.txt", :checkpoint => ""})
    end
  end
#=end

  def test_creat_file
    puts "测新建一个文件,文件内容只有一行=========================woolen========"
    assert_success do
      @lp_file_oper.creat_file({:file => "D:/windump.txt", :file_content => "我要测测是不是对的", :is_recover => "否"})
    end
    puts "测新建一个文件,原来已有对应目录=========================woolen========"
    assert_success do
      @lp_file_oper.creat_file({:file => "D:/windump.txt", :file_content => "我要测测是不是对的\n两行哟", :is_recover => "是"})
    end
    puts "测新建一个文件,原来已有文件,而不覆盖=========================woolen========"
    assert_fail do
      @lp_file_oper.creat_file({:file => "D:/windump.txt", :file_content => "我要测测是不是对的\n两行哟", :is_recover => "否"})
    end
    puts "测新建一个文件,原来没有有对应目录=========================woolen========"
    assert_success do
      @lp_file_oper.creat_file({:file => "D:/af_bvt/project/branches/AF3.0/temp/windump.txt", :file_content => "我要测测是不是对的\n两行哟", :is_recover => "否"})
    end
  end
=end
  def test_coyp_file
    puts "测复制一个文件,目的没有文件 =========================woolen========"
    assert_success do
      @lp_file_oper.copy_file({:src_file => "D:/windump.txt", :dst_file => "d:/test2.txt", :is_recover => "是"})
    end
    puts "测复制一个文件,目的是个目录 =========================woolen========"
    assert_success do
      @lp_file_oper.copy_file({:src_file => "D:/windump.txt", :dst_file => "d:/test/", :is_recover => "是"})
    end
    puts "测复制一个文件,原来已有文件,而不覆盖=========================woolen========"
    assert_fail do
      @lp_file_oper.copy_file({:src_file => "D:/windump.txt", :dst_file => "d:/test2.txt", :is_recover => "否"})
    end
    puts "测复制一个文件,原来没有有对应目录=========================woolen========"
    assert_success do
      @lp_file_oper.copy_file({:src_file => "D:/windump.txt", :dst_file => "D:/af_bvt/project/branches/AF3.0/temp/windump.txt", :is_recover => "否"})
    end
  end
end

  