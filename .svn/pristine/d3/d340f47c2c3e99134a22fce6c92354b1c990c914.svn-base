# coding: utf-8
module LocalPc
  module NetworkAccess
    module AutoItSendPacketHelper
      
      # => 使用AutoItX3进行调用带窗口的程序
      # program_path 相对项目的根目录而言的程序位置 (根目录由第三个参数的扩展hash里面的"base_path"键值对应的路径来确定
      # wait_time 等待程序打开的超时时间,默认为20秒
      # extern_hash 留作扩展使用的传参hash,其中的"base_path"键值被用作基础路径
      # return 启动的进程ID , 启动的进程窗口句柄号
      def autoitx_run_win_program(program_path,wait_time = 20,extern_hash = {"base_path" => ATT::ConfigureManager.root,"title" => ""})
        extern_hash["base_path"] = ATT::ConfigureManager.root if extern_hash["base_path"] == nil or extern_hash["base_path"] == ""
        path = File.join(extern_hash["base_path"],program_path)
        base_name = File.basename(path, ".exe")
        base_name = extern_hash["title"]  if extern_hash["title"] != ""
        #path="#{$bin+"TcpClient.exe"}".to_utf8
        processid = AutoItX3.run(path.to_utf8)
        ATT::KeyLog.info("create process #{processid},basename #{base_name}/end")
        if AutoItX3.WinWait(base_name,"",wait_time)==0
          ATT::KeyLog.error("WinWait:#{base_name},等待超时")
          return_fail "失败"
        else
          if AutoItX3.WinActivate(base_name) == 0
            ATT::KeyLog.error("未发现程序#{base_name}启动窗口")
            return_fail
          end
          # puts "#{win.getClassName}\t#{win.getWindowText}\t#{win.hwnd}"
          win_list = AutoItX3.WinList(base_name)
          win_list[0][0].times { |i|
            hwnd = win_list[1][i+1]
            ATT::KeyLog.info("handle :: #{hwnd}")
            ATT::KeyLog.info("win_proccess : " + AutoItX3.WinGetProcess("[HANDLE:#{hwnd}]"))
            if processid == AutoItX3.WinGetProcess("[HANDLE:#{hwnd}]").to_i
              return [processid, hwnd]
            end
          }
          ATT::KeyLog.error("没找到processid为#{processid}的窗口")
          return_fail "失败"
        end
      end

      # => 根据进程PID 以及 进程窗口的名字 name 定位具体的窗口句柄
      # 如果pid是空或者空字符串,都将返回所有名字符合的窗口句柄
      # 返回一个句柄数组
      def get_hendles_by_pid_name(pid,name)
        handle_array = []
        win_list = AutoItX3.WinList(name)
        win_list[0][0].times { |i|
          hwnd = win_list[1][i+1]
          if pid == AutoItX3.WinGetProcess("[HANDLE:#{hwnd}]").to_i or pid == "" or pid == nil
            handle_array << hwnd
          end
        }
        ATT::KeyLog.debug("找不到pid为:#{pid} 且名字是:#{name}") if handle_array.length == 0
        return handle_array
      end
      
      def tcp_send(hash,processid, handle)
        #  hash.update({:size=>"1400",:fastest=>"false",:interval=>"1000",:count=>"5",:hope=>"成功",:close=>"no"})
        flag = "失败"
        ATT::KeyLog.info(hash.to_json)
        arr = hash[:dip].split(".")
        #    p handle
        #    p arr
        AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit4",arr[0])
        AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit3",arr[1])
        AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit2",arr[2])
        AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit1",arr[3])

        AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit5",hash[:port])
        AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit6",hash[:size])
        if hash[:fastest] == "true"
          AutoItX3.ControlCommand("[HANDLE:#{handle}]","","Button1","Check","")
        else
          AutoItX3.ControlCommand("[HANDLE:#{handle}]","","Button1","UnCheck","")
          cs = AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox1","FindString",hash[:interval])
          AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox1","SetCurrentSelection",cs)
          cs = AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox2","FindString",hash[:count])
          AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox2","SetCurrentSelection",cs)
          #AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox2","SelectString",arg["次数"])
        end
        if nil != hash[:file]&&"" != hash[:file]
          AutoItX3.ControlClick("[HANDLE:#{handle}]","","Button4")
          AutoItX3.ControlClick("[HANDLE:#{handle}]","","Button5")
          if AutoItX3.WinWait("打开","查找范围(&I):",20)==0
            return["Failed","WinWait:打开,等待超时"]
          end
          filepath = File.join(ATT::ConfigureManager.root,"data", "#{hash[:file]}")
          AutoItX3.ControlSend("打开", "查找范围(&I):", "Edit1", filepath.gsub("/","\\").to_utf8)
          AutoItX3.ControlClick("打开", "查找范围(&I):", "Button2")
        else
          AutoItX3.ControlClick("[HANDLE:#{handle}]","","Button3")
        end
        AutoItX3.ControlClick("[HANDLE:#{handle}]","","Button6")

        flag = "超时"

        for i in 1..20#检测是否没有连上或数据文件是否发送完毕
          sleep 5
          tcpclient_win = get_hendles_by_pid_name(processid,"TcpClient")
          if tcpclient_win.length == 1
            if hash[:file].to_s==""
              speedstr = AutoItX3.ControlGetText("[HANDLE:#{handle}]","","Static7")
              speed = speedstr.gsub("KB/s","").strip.to_i
              if speed>0
                flag = "成功"
                break
              end
              next
            else
              sleep 1#正在发送数据,等待发送完毕,一共会等(1+5)*20=120秒
            end
          else
            tcpclient_win.each { |hwnd|
              text = AutoItX3.ControlGetText("[HANDLE:#{handle}]","","Static2")
              if  !text.include?("间隔")#连接失败或文件发送完毕
                if text.upcase.include?("ERR")||text.upcase.include?("FAIL")
                  ATT::KeyLog.info("连接不上服务端\n")
                  flag = "失败"
                end
                if text.include?("文件发送完毕")
                  ATT::KeyLog.info("文件发送完毕\n")
                  flag = "成功"
                end
                AutoItX3.ControlClick("[HANDLE:#{handle}]","","Button1")
              end
            }
            break
          end
        end
        ATT::KeyLog.info("连接超时") if flag=="超时"
        if flag == "失败"|| flag=="超时"||"true" ==  hash[:close].downcase
          handle = get_hendles_by_pid_name(processid,"TcpClient")[0]
          AutoItX3.ControlClick("[HANDLE:#{handle}]","","Button8")
        end

        if flag == "成功"
          return_ok
        else
          return_fail
        end
      end

      # => 找到TcpClient的窗口,根据hash里面的一些信息
      def find_tcpclient_window(arg={})
        #找到所有符合该标题的窗口
        hwnds = get_hendles_by_pid_name("",arg[:title])
        winhandle = nil
        hwnds.each{ |handle|
          flag = true
          if nil != arg[:dip]&&"" != arg[:dip]#查看ip是否符合
            arr = []
            arr.push AutoItX3.ControlGetText("[HANDLE:#{handle}]","","Edit4")
            arr.push AutoItX3.ControlGetText("[HANDLE:#{handle}]","","Edit3")
            arr.push AutoItX3.ControlGetText("[HANDLE:#{handle}]","","Edit2")
            arr.push AutoItX3.ControlGetText("[HANDLE:#{handle}]","","Edit1")
            ip = arr.join(".")
            puts ip
            if ip != arg[:dip]
              flag = false
            end
          end

          if flag && nil != arg[:port]&&"" != arg[:port]#查看端口是否符合
            tmp = AutoItX3.ControlGetText("[HANDLE:#{handle}]","","Edit5")
            puts tmp
            if tmp != arg[:port]
              flag = false
            end
          end

          if flag && nil != arg[:size]&& "" != arg[:size]#查看包大小是否符合
            tmp = AutoItX3.ControlGetText("[HANDLE:#{handle}]","","Edit6")
            if tmp != arg[:size]
              flag = false
            end
          end

          if flag         #查看是否最快,间隔,次数是否符合
            if arg[:fastest] == "true"
              if !AutoItX3.ControlCommand("[HANDLE:#{handle}]","","Button1","IsChecked","")
                flag = false
              end
            else
              if nil != arg[:interval]&&"" != arg[:interval]
                tmp = AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox1","GetCurrentSelection","")
                if tmp != arg[:interval]
                  flag = false
                end
              end

              if nil != arg[:count]&&"" != arg[:count]
                tmp = AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox2","GetCurrentSelection","")
                if tmp != arg[:count]
                  flag = false
                end
              end
            end
            if flag
              winhandle = handle
              break
            end
          end
        }
        return winhandle
      end
      
      def check_tcpclient_speed(hash)
        if hash[:title].to_s==""
          ATT::KeyLog.info("窗口标题不能为空")
          return_fail
        end
        ATT::KeyLog.info("查找条件是:#{hash.to_json}")
        winhandle = find_tcpclient_window(hash)
        if winhandle == nil
          ATT::KeyLog.error("没有找到符合条件的指定的发包工具窗口")
          return_fail
        else
          find=0
          ATT::KeyLog.info("期望最小速度为:#{hash[:min_speed]}KB/s")
          ATT::KeyLog.info("期望最大速度为:#{hash[:max_speed]}KB/s")
          5.times do#检查5次,有3次成功则认为成功
            speedstr = AutoItX3.ControlGetText("[HANDLE:#{winhandle}]","","Static7")
            speed = speedstr.gsub!("KB/s","").strip.to_i
            ATT::KeyLog.info("发包速度为:#{speed}KB/s")
            flag=true
            if(hash[:min_speed].to_s!="")
              if speed >= hash[:min_speed].strip.to_i
                flag=true;
              else
                flag=false
              end
            end
            flag2=true
            if(hash[:max_speed].to_s!="")
              if speed <=hash[:max_speed].strip.to_i
                flag2=true;
              else
                flag2=false
              end
            end
            find+=1 if flag&&flag2
            sleep 5
          end
          if find>=3
            ATT::KeyLog.info("发包速度达到了期望速度")
            return_ok
          else
            ATT::KeyLog.info("没有达到指定的速度")
            return_fail
          end
        end
      end

      def close_tcpclient_window(hash)
        if hash[:title]==nil||hash[:title]==""
          ATT::KeyLog.info("窗口标题不能为空")
          return_fail "失败"
        end
        ATT::KeyLog.info("查找条件是:#{hash.to_json}")
        winhandle = find_tcpclient_window(hash)

        if winhandle == nil
          ATT::KeyLog.info("没有找到符合条件的指定的发包工具窗口")
          return_fail "失败"
        else
          AutoItX3.ControlClick("[HANDLE:#{winhandle}]","","Button6")
          AutoItX3.ControlClick("[HANDLE:#{winhandle}]","","Button8")
          ATT::KeyLog.info("成功关闭指定窗口")
          return_fail "成功"
        end
      end

      # => 根据NewClient的
      def newclient_send_udp(hash,handle)
        flag=false
        if handle.to_i > 0
          #      arr = arg["目的ip"].split('.')
          arr = hash[:dip].split(".")
          AutoItX3.ControlCommand("[HANDLE:#{handle}]","","Button5","Check","")

          AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit4",arr[0])
          AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit3",arr[1])
          AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit2",arr[2])
          AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit1",arr[3])

          AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit5",hash[:port])
          AutoItX3.ControlSetText("[HANDLE:#{handle}]","","Edit6",hash[:size])
          if hash[:fastest] == "true"
            AutoItX3.ControlCommand("[HANDLE:#{handle}]","","Button2","Check","")
          else
            cs = AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox1","FindString",hash[:interval])
            AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox1","SetCurrentSelection",cs)
            cs = AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox2","FindString",hash[:count])
            AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox2","SetCurrentSelection",cs)
            #AutoItX3.ControlCommand("[HANDLE:#{handle}]","","ComboBox2","SelectString",arg["次数"])
          end
          AutoItX3.ControlClick("[HANDLE:#{handle}]","","Button1")
          flag=true
        end
        if(flag==true)
          ATT::KeyLog.info("发送udp包成功")
          return_ok
        else
          ATT::KeyLog.info("发送udp包失败,工具窗口没有找到")
          return_fail
        end
      end
    end
  end
end
