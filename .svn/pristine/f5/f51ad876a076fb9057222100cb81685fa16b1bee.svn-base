# coding: utf-8
#
# This file is generated by att util tool.
# by 2012-12-20 14:53:46
#
$LOAD_PATH.unshift File.join(File.dirname(__FILE__),'../../../../') unless $LOADED
require 'keywords/unittests/setup'

class TestAuthenticationServer < Test::Unit::TestCase
  def setup
    @common = Common.new
    @server = DeviceConsole::CertificationSystem::AuthenticationServer.new
    assert_success do
      @common.set_current_device( $common["login_hash"] ) # 设置正确的当前设备的IP,用户名,密码
    end
  end

  def test_add_ldap_server
    assert_success do
      @server.add_ldap_server({:name => "test1",:ip => "1.1.1.1",:basedn => "111",:type => "Open LDAP",:anonymous => "是",\
            :user => "test",:passwd => "12345"})
    end
  end

  def test_edit_ldap_server
    assert_success do
      @server.edit_ldap_server({:name => "test1",:ip => "2.1.1.1",:basedn => "111",:type => "Open LDAP",:anonymous => "是",\
            :user => "test",:passwd => "12345"})
    end
  end
  
  def test_add_radius_server
    assert_success do
      @server.add_radius_server({:name => "test2",:ip => "2.1.1.1",:port => "899",:sharekey => "123456",:protocol => "质询握手身份验证协议",\
            :user => "test",:passwd => "12345"})
    end
  end
  
  def test_edit_radius_server
    assert_success do
      @server.edit_radius_server({:name => "test2",:ip => "2.1.2.1",:port => "899",:sharekey => "123456",:protocol => "Microsoft CHAP2",\
            :user => "test",:passwd => "12345"})
    end
  end
  
  def test_add_pop3_server
    assert_success do
      @server.add_pop3_server({:name => "test3",:ip => "2.1.2.1",:port => "899",:timeout => "50",\
            :user => "test",:passwd => "12345"})
    end
  end
  
  def test_edit_pop3_server
    assert_success do
      @server.edit_pop3_server({:name => "test3",:ip => "2.1.2.1",:port => "899",:timeout => "80",\
            :user => "test",:passwd => "12345"})
    end
  end
  
  def test_enable_disable_authenticate_server
    assert_success do
      @server.enable_disable_authenticate_server({:enable_count => "部分操作",:names => "test1&test3",:enable_type => "禁用"})
    end
    assert_success do
      @server.enable_disable_authenticate_server({:enable_count => "全部操作",:enable_type => "启用"})
    end
  end
  
  def test_delete_authenticate_server
    assert_success do
      @server.delete_authenticate_server({:delete_type => "部分删除",:names => "test3"})
    end
     assert_success do
      @server.delete_authenticate_server({:delete_type => "全部删除"})
    end
  end
  
end