# coding: utf-8
module DeviceConsole
  module FluxManager
    module PassageWayHelper
      def get_enable_disable_hash(hash)
        flag = false if hash[:enable] == "禁用"
        flag = true if hash[:enable] == "启用"
        return result_hash = {"opr" => "submit", "enable" => flag}
      end

      def get_add_passage_hash(hash)
        result_hash = {"opr" => "add"}
        result_hash["data"] = get_passage_data_hash(hash)
        return result_hash
      end
      def get_edit_passage_hash(hash)
        result_hash = {"opr" => "edit"}
        result_hash["data"] = get_passage_data_hash(hash)
        return result_hash
      end

      def get_passage_data_hash(hash)
        data_hash = {}
        # => 带宽通道设置 页面的数据内容
        data_hash["enable"] = ( hash[:enable] == "启用" )
        data_hash["fatherID"] = ""   # => 暂时不知道这个id是干嘛使的,抓了两次都是空,暂定为永空
        data_hash["channelID"] = []   # => 暂时不知道这个id是干嘛使的,抓了两次都是空,暂定为永空
        data_hash["hide"] = get_data_hide_hash(hash)
        data_hash["name"] = hash[:name] | "sinfor_test_"+ Time.now.to_s
        data_hash["line"] = hash[:line].to_i
        data_hash["type"] = get_data_type_hash(hash)
        data_hash["sip"] = get_data_sip_hash(hash)
        data_hash["advance"] = {"misc" => (hash[:is_enable_advance] == "是")}

        # => 通道使用内容 页面的数据内容
        
      end

      def get_data_hide_hash(hash)
        hide_hash = {}
        hide_hash["hide"]["upmax"] = []
        hide_hash["hide"]["downmax"] = []
        hide_hash["hide"]["upsure"] = []
        hide_hash["hide"]["downsure"] = []
        hide_hash["hide"]["filetype"] = ""
        hide_hash["hide"]["url"] = ""
        hide_hash["hide"]["all"] = ""
        hide_hash["hide"]["unknown"] = ""
        hide_hash["hide"]["line_status"] = []
        return hide_hash
      end

      # => 获得 带宽通道类型中 的限制带宽和保持带宽的配置hash数据
      def get_data_type_hash(hash)
        type_hash = {}
        type_hash["type_sel"] = "limit" if hash[:passage_type] == "限制通道"
        type_hash["type_sel"] = "guarantee" if hash[:passage_type] == "保证通道"
        type_hash["guarantee"] = {}
        type_hash["guarantee"]["up"] = {}
        type_hash["guarantee"]["up"]["assured"] = hash[:ensure_rate].to_i if hash[:ensure_rate] != nil and hash[:ensure_rate] != ""
        type_hash["guarantee"]["up"]["upsure_speed"] = hash[:ensure_speed].to_i if hash[:ensure_speed] != nil and hash[:ensure_speed] != ""
        type_hash["guarantee"]["up"]["max"] = hash[:guarantee_upmax_rate].to_i if hash[:guarantee_upmax_rate] != nil and hash[:guarantee_upmax_rate] != ""
        type_hash["guarantee"]["up"]["upmax_speed"] = hash[:guarantee_upmax_speed].to_i if hash[:guarantee_upmax_speed] != nil and hash[:guarantee_upmax_speed] != ""
        type_hash["guarantee"]["down"] = {}
        type_hash["guarantee"]["down"]["assured"] = hash[:ensure_rate].to_i if hash[:ensure_rate] != nil and hash[:ensure_rate] != ""
        type_hash["guarantee"]["down"]["downsure_speed"] = hash[:ensure_speed].to_i if hash[:ensure_speed] != nil and hash[:ensure_speed] != ""
        type_hash["guarantee"]["down"]["max"] = hash[:guarantee_downmax_rate].to_i if hash[:guarantee_downmax_rate] != nil and hash[:guarantee_downmax_rate] != ""
        type_hash["guarantee"]["down"]["downmax_speed"] = hash[:guarantee_downmax_speed].to_i if hash[:guarantee_downmax_speed] != nil and hash[:guarantee_downmax_speed] != ""
        type_hash["guarantee"]["priority"] = hash[:guarantee_priority]
        type_hash["guarantee"]["enable"] = hash[:guarantee_enable]
        type_hash["limit"] = {}
        type_hash["limit"]["up"] = {}
        type_hash["limit"]["up"]["max"] = hash[:limit_upmax_rate].to_i if hash[:limit_upmax_rate] != nil and hash[:limit_upmax_rate] != ""
        type_hash["limit"]["up"]["upmax_speed"] = hash[:limit_upmax_speed].to_i if hash[:limit_upmax_speed] != nil and hash[:limit_upmax_speed] != ""
        type_hash["limit"]["down"] = {}
        type_hash["limit"]["down"]["max"] = hash[:limit_downmax_rate].to_i if hash[:limit_downmax_rate] != nil and hash[:limit_downmax_rate] != ""
        type_hash["limit"]["down"]["downmax_speed"] = hash[:limit_downmax_speed].to_i if hash[:limit_downmax_speed] != nil and hash[:limit_downmax_speed] != ""
        type_hash["limit"]["priority"] = hash[:limit_priority]
        type_hash["limit"]["enable"] = hash[:limit_enable]
        return type_hash
      end

      def get_data_sip_hash(hash)
        sip_hash = {}
        sip_hash["up"] = {"max" => hash[:single_ip_up_max].to_i}
        sip_hash["down"] = {"max" => hash[:single_ip_down_max].to_i}
        sip_hash["enable"] = ( hash[:is_enable_single_ip_speed] == "是" )
        return sip_hash
      end
    end
  end
end
